
Stopwatch_and_Watchdog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000273a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  0000273a  000027ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080007a  0080007a  000027e8  2**0
                  ALLOC
  3 .stab         0000204c  00000000  00000000  000027e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f24  00000000  00000000  00004834  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005758  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005898  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007651  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000853c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000092ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000944c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000096d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009ea7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 aa 12 	jmp	0x2554	; 0x2554 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 37       	cpi	r26, 0x7D	; 125
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 34 13 	call	0x2668	; 0x2668 <main>
      8a:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e7       	ldi	r26, 0x71	; 113
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 80 13 	jmp	0x2700	; 0x2700 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e7       	ldi	r24, 0x71	; 113
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 80 13 	jmp	0x2700	; 0x2700 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 90 13 	jmp	0x2720	; 0x2720 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer0_Init>:
#include "Timers.h"


void Timer0_Init(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SREG  |= (1<<7);
     b4e:	af e5       	ldi	r26, 0x5F	; 95
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
	TCCR0=0x85;
     b5c:	e3 e5       	ldi	r30, 0x53	; 83
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	85 e8       	ldi	r24, 0x85	; 133
     b62:	80 83       	st	Z, r24
	TIMSK=(TIMSK&0xFE)|1;
     b64:	a9 e5       	ldi	r26, 0x59	; 89
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	e9 e5       	ldi	r30, 0x59	; 89
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	81 60       	ori	r24, 0x01	; 1
     b70:	8c 93       	st	X, r24
	TCNT0=247;
     b72:	e2 e5       	ldi	r30, 0x52	; 82
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	87 ef       	ldi	r24, 0xF7	; 247
     b78:	80 83       	st	Z, r24
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Timer0_Set_Start>:

void Timer0_Set_Start(uint8 start){
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	0f 92       	push	r0
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=start;
     b8c:	e2 e5       	ldi	r30, 0x52	; 82
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	80 83       	st	Z, r24
}
     b94:	0f 90       	pop	r0
     b96:	cf 91       	pop	r28
     b98:	df 91       	pop	r29
     b9a:	08 95       	ret

00000b9c <DIO_SetPortDir>:


#include "DIO.h"


void DIO_SetPortDir(uint8 Port, DirectionType Dir) {
     b9c:	df 93       	push	r29
     b9e:	cf 93       	push	r28
     ba0:	00 d0       	rcall	.+0      	; 0xba2 <DIO_SetPortDir+0x6>
     ba2:	00 d0       	rcall	.+0      	; 0xba4 <DIO_SetPortDir+0x8>
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	89 83       	std	Y+1, r24	; 0x01
     baa:	6a 83       	std	Y+2, r22	; 0x02
	switch (Port) {
     bac:	89 81       	ldd	r24, Y+1	; 0x01
     bae:	28 2f       	mov	r18, r24
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	3c 83       	std	Y+4, r19	; 0x04
     bb4:	2b 83       	std	Y+3, r18	; 0x03
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	9c 81       	ldd	r25, Y+4	; 0x04
     bba:	81 30       	cpi	r24, 0x01	; 1
     bbc:	91 05       	cpc	r25, r1
     bbe:	d1 f0       	breq	.+52     	; 0xbf4 <DIO_SetPortDir+0x58>
     bc0:	2b 81       	ldd	r18, Y+3	; 0x03
     bc2:	3c 81       	ldd	r19, Y+4	; 0x04
     bc4:	22 30       	cpi	r18, 0x02	; 2
     bc6:	31 05       	cpc	r19, r1
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <DIO_SetPortDir+0x38>
     bca:	8b 81       	ldd	r24, Y+3	; 0x03
     bcc:	9c 81       	ldd	r25, Y+4	; 0x04
     bce:	00 97       	sbiw	r24, 0x00	; 0
     bd0:	61 f0       	breq	.+24     	; 0xbea <DIO_SetPortDir+0x4e>
     bd2:	1e c0       	rjmp	.+60     	; 0xc10 <DIO_SetPortDir+0x74>
     bd4:	2b 81       	ldd	r18, Y+3	; 0x03
     bd6:	3c 81       	ldd	r19, Y+4	; 0x04
     bd8:	22 30       	cpi	r18, 0x02	; 2
     bda:	31 05       	cpc	r19, r1
     bdc:	81 f0       	breq	.+32     	; 0xbfe <DIO_SetPortDir+0x62>
     bde:	8b 81       	ldd	r24, Y+3	; 0x03
     be0:	9c 81       	ldd	r25, Y+4	; 0x04
     be2:	83 30       	cpi	r24, 0x03	; 3
     be4:	91 05       	cpc	r25, r1
     be6:	81 f0       	breq	.+32     	; 0xc08 <DIO_SetPortDir+0x6c>
     be8:	13 c0       	rjmp	.+38     	; 0xc10 <DIO_SetPortDir+0x74>
	case DIO_PORTA:
		DDRA = Dir;
     bea:	ea e3       	ldi	r30, 0x3A	; 58
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	8a 81       	ldd	r24, Y+2	; 0x02
     bf0:	80 83       	st	Z, r24
     bf2:	0e c0       	rjmp	.+28     	; 0xc10 <DIO_SetPortDir+0x74>
		break;
	case DIO_PORTB:
		DDRB = Dir;
     bf4:	e7 e3       	ldi	r30, 0x37	; 55
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	8a 81       	ldd	r24, Y+2	; 0x02
     bfa:	80 83       	st	Z, r24
     bfc:	09 c0       	rjmp	.+18     	; 0xc10 <DIO_SetPortDir+0x74>
		break;
	case DIO_PORTC:
		DDRC = Dir;
     bfe:	e4 e3       	ldi	r30, 0x34	; 52
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	80 83       	st	Z, r24
     c06:	04 c0       	rjmp	.+8      	; 0xc10 <DIO_SetPortDir+0x74>
		break;
	case DIO_PORTD:
		DDRD = Dir;
     c08:	e1 e3       	ldi	r30, 0x31	; 49
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	8a 81       	ldd	r24, Y+2	; 0x02
     c0e:	80 83       	st	Z, r24
		break;

	}
}
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	cf 91       	pop	r28
     c1a:	df 91       	pop	r29
     c1c:	08 95       	ret

00000c1e <DIO_SetPinDir>:
void DIO_SetPinDir(uint8 Port, uint8 Pin, DirectionType Dir) {
     c1e:	df 93       	push	r29
     c20:	cf 93       	push	r28
     c22:	00 d0       	rcall	.+0      	; 0xc24 <DIO_SetPinDir+0x6>
     c24:	00 d0       	rcall	.+0      	; 0xc26 <DIO_SetPinDir+0x8>
     c26:	0f 92       	push	r0
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
     c2c:	89 83       	std	Y+1, r24	; 0x01
     c2e:	6a 83       	std	Y+2, r22	; 0x02
     c30:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port) {
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	3d 83       	std	Y+5, r19	; 0x05
     c3a:	2c 83       	std	Y+4, r18	; 0x04
     c3c:	8c 81       	ldd	r24, Y+4	; 0x04
     c3e:	9d 81       	ldd	r25, Y+5	; 0x05
     c40:	81 30       	cpi	r24, 0x01	; 1
     c42:	91 05       	cpc	r25, r1
     c44:	09 f4       	brne	.+2      	; 0xc48 <DIO_SetPinDir+0x2a>
     c46:	43 c0       	rjmp	.+134    	; 0xcce <DIO_SetPinDir+0xb0>
     c48:	2c 81       	ldd	r18, Y+4	; 0x04
     c4a:	3d 81       	ldd	r19, Y+5	; 0x05
     c4c:	22 30       	cpi	r18, 0x02	; 2
     c4e:	31 05       	cpc	r19, r1
     c50:	2c f4       	brge	.+10     	; 0xc5c <DIO_SetPinDir+0x3e>
     c52:	8c 81       	ldd	r24, Y+4	; 0x04
     c54:	9d 81       	ldd	r25, Y+5	; 0x05
     c56:	00 97       	sbiw	r24, 0x00	; 0
     c58:	71 f0       	breq	.+28     	; 0xc76 <DIO_SetPinDir+0x58>
     c5a:	bc c0       	rjmp	.+376    	; 0xdd4 <DIO_SetPinDir+0x1b6>
     c5c:	2c 81       	ldd	r18, Y+4	; 0x04
     c5e:	3d 81       	ldd	r19, Y+5	; 0x05
     c60:	22 30       	cpi	r18, 0x02	; 2
     c62:	31 05       	cpc	r19, r1
     c64:	09 f4       	brne	.+2      	; 0xc68 <DIO_SetPinDir+0x4a>
     c66:	5f c0       	rjmp	.+190    	; 0xd26 <DIO_SetPinDir+0x108>
     c68:	8c 81       	ldd	r24, Y+4	; 0x04
     c6a:	9d 81       	ldd	r25, Y+5	; 0x05
     c6c:	83 30       	cpi	r24, 0x03	; 3
     c6e:	91 05       	cpc	r25, r1
     c70:	09 f4       	brne	.+2      	; 0xc74 <DIO_SetPinDir+0x56>
     c72:	85 c0       	rjmp	.+266    	; 0xd7e <DIO_SetPinDir+0x160>
     c74:	af c0       	rjmp	.+350    	; 0xdd4 <DIO_SetPinDir+0x1b6>
	case DIO_PORTA:
		if (Dir == OUTPUT) {
     c76:	8b 81       	ldd	r24, Y+3	; 0x03
     c78:	81 30       	cpi	r24, 0x01	; 1
     c7a:	a1 f4       	brne	.+40     	; 0xca4 <DIO_SetPinDir+0x86>
			SET_BIT(DDRA, Pin);
     c7c:	aa e3       	ldi	r26, 0x3A	; 58
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	ea e3       	ldi	r30, 0x3A	; 58
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	48 2f       	mov	r20, r24
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	28 2f       	mov	r18, r24
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	02 2e       	mov	r0, r18
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <DIO_SetPinDir+0x7c>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	0a 94       	dec	r0
     c9c:	e2 f7       	brpl	.-8      	; 0xc96 <DIO_SetPinDir+0x78>
     c9e:	84 2b       	or	r24, r20
     ca0:	8c 93       	st	X, r24
     ca2:	98 c0       	rjmp	.+304    	; 0xdd4 <DIO_SetPinDir+0x1b6>
		} else {
			CLEAR_BIT(DDRA, Pin);
     ca4:	aa e3       	ldi	r26, 0x3A	; 58
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	ea e3       	ldi	r30, 0x3A	; 58
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	48 2f       	mov	r20, r24
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	02 2e       	mov	r0, r18
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <DIO_SetPinDir+0xa4>
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	0a 94       	dec	r0
     cc4:	e2 f7       	brpl	.-8      	; 0xcbe <DIO_SetPinDir+0xa0>
     cc6:	80 95       	com	r24
     cc8:	84 23       	and	r24, r20
     cca:	8c 93       	st	X, r24
     ccc:	83 c0       	rjmp	.+262    	; 0xdd4 <DIO_SetPinDir+0x1b6>
		}
		break;
	case DIO_PORTB:
		if (Dir == OUTPUT) {
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	a1 f4       	brne	.+40     	; 0xcfc <DIO_SetPinDir+0xde>
			SET_BIT(DDRB, Pin);
     cd4:	a7 e3       	ldi	r26, 0x37	; 55
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e7 e3       	ldi	r30, 0x37	; 55
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 2e       	mov	r0, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <DIO_SetPinDir+0xd4>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <DIO_SetPinDir+0xd0>
     cf6:	84 2b       	or	r24, r20
     cf8:	8c 93       	st	X, r24
     cfa:	6c c0       	rjmp	.+216    	; 0xdd4 <DIO_SetPinDir+0x1b6>
		} else {
			CLEAR_BIT(DDRB, Pin);
     cfc:	a7 e3       	ldi	r26, 0x37	; 55
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e7 e3       	ldi	r30, 0x37	; 55
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	48 2f       	mov	r20, r24
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	02 2e       	mov	r0, r18
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <DIO_SetPinDir+0xfc>
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	0a 94       	dec	r0
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <DIO_SetPinDir+0xf8>
     d1e:	80 95       	com	r24
     d20:	84 23       	and	r24, r20
     d22:	8c 93       	st	X, r24
     d24:	57 c0       	rjmp	.+174    	; 0xdd4 <DIO_SetPinDir+0x1b6>
		}
		break;
	case DIO_PORTC:
		if (Dir == OUTPUT) {
     d26:	8b 81       	ldd	r24, Y+3	; 0x03
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	a1 f4       	brne	.+40     	; 0xd54 <DIO_SetPinDir+0x136>
			SET_BIT(DDRC, Pin);
     d2c:	a4 e3       	ldi	r26, 0x34	; 52
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e4 e3       	ldi	r30, 0x34	; 52
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	48 2f       	mov	r20, r24
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	02 2e       	mov	r0, r18
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <DIO_SetPinDir+0x12c>
     d46:	88 0f       	add	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	0a 94       	dec	r0
     d4c:	e2 f7       	brpl	.-8      	; 0xd46 <DIO_SetPinDir+0x128>
     d4e:	84 2b       	or	r24, r20
     d50:	8c 93       	st	X, r24
     d52:	40 c0       	rjmp	.+128    	; 0xdd4 <DIO_SetPinDir+0x1b6>
		} else {
			CLEAR_BIT(DDRC, Pin);
     d54:	a4 e3       	ldi	r26, 0x34	; 52
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e4 e3       	ldi	r30, 0x34	; 52
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	48 2f       	mov	r20, r24
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	28 2f       	mov	r18, r24
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	02 2e       	mov	r0, r18
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <DIO_SetPinDir+0x154>
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	0a 94       	dec	r0
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <DIO_SetPinDir+0x150>
     d76:	80 95       	com	r24
     d78:	84 23       	and	r24, r20
     d7a:	8c 93       	st	X, r24
     d7c:	2b c0       	rjmp	.+86     	; 0xdd4 <DIO_SetPinDir+0x1b6>
		}
		break;
	case DIO_PORTD:
		if (Dir == OUTPUT) {
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	81 30       	cpi	r24, 0x01	; 1
     d82:	a1 f4       	brne	.+40     	; 0xdac <DIO_SetPinDir+0x18e>
			SET_BIT(DDRD, Pin);
     d84:	a1 e3       	ldi	r26, 0x31	; 49
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e1 e3       	ldi	r30, 0x31	; 49
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	48 2f       	mov	r20, r24
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	28 2f       	mov	r18, r24
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	02 2e       	mov	r0, r18
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <DIO_SetPinDir+0x184>
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	0a 94       	dec	r0
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <DIO_SetPinDir+0x180>
     da6:	84 2b       	or	r24, r20
     da8:	8c 93       	st	X, r24
     daa:	14 c0       	rjmp	.+40     	; 0xdd4 <DIO_SetPinDir+0x1b6>
		} else {
			CLEAR_BIT(DDRD, Pin);
     dac:	a1 e3       	ldi	r26, 0x31	; 49
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	e1 e3       	ldi	r30, 0x31	; 49
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	48 2f       	mov	r20, r24
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	28 2f       	mov	r18, r24
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	02 2e       	mov	r0, r18
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <DIO_SetPinDir+0x1ac>
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	0a 94       	dec	r0
     dcc:	e2 f7       	brpl	.-8      	; 0xdc6 <DIO_SetPinDir+0x1a8>
     dce:	80 95       	com	r24
     dd0:	84 23       	and	r24, r20
     dd2:	8c 93       	st	X, r24
		}
		break;

	}
}
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <DIO_SetPortVal>:

void DIO_SetPortVal(uint8 Port,uint8 Val){
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	00 d0       	rcall	.+0      	; 0xdea <DIO_SetPortVal+0x6>
     dea:	00 d0       	rcall	.+0      	; 0xdec <DIO_SetPortVal+0x8>
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	89 83       	std	Y+1, r24	; 0x01
     df2:	6a 83       	std	Y+2, r22	; 0x02
	switch (Port) {
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	3c 83       	std	Y+4, r19	; 0x04
     dfc:	2b 83       	std	Y+3, r18	; 0x03
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	9c 81       	ldd	r25, Y+4	; 0x04
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	91 05       	cpc	r25, r1
     e06:	d1 f0       	breq	.+52     	; 0xe3c <DIO_SetPortVal+0x58>
     e08:	2b 81       	ldd	r18, Y+3	; 0x03
     e0a:	3c 81       	ldd	r19, Y+4	; 0x04
     e0c:	22 30       	cpi	r18, 0x02	; 2
     e0e:	31 05       	cpc	r19, r1
     e10:	2c f4       	brge	.+10     	; 0xe1c <DIO_SetPortVal+0x38>
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	9c 81       	ldd	r25, Y+4	; 0x04
     e16:	00 97       	sbiw	r24, 0x00	; 0
     e18:	61 f0       	breq	.+24     	; 0xe32 <DIO_SetPortVal+0x4e>
     e1a:	1e c0       	rjmp	.+60     	; 0xe58 <DIO_SetPortVal+0x74>
     e1c:	2b 81       	ldd	r18, Y+3	; 0x03
     e1e:	3c 81       	ldd	r19, Y+4	; 0x04
     e20:	22 30       	cpi	r18, 0x02	; 2
     e22:	31 05       	cpc	r19, r1
     e24:	81 f0       	breq	.+32     	; 0xe46 <DIO_SetPortVal+0x62>
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	9c 81       	ldd	r25, Y+4	; 0x04
     e2a:	83 30       	cpi	r24, 0x03	; 3
     e2c:	91 05       	cpc	r25, r1
     e2e:	81 f0       	breq	.+32     	; 0xe50 <DIO_SetPortVal+0x6c>
     e30:	13 c0       	rjmp	.+38     	; 0xe58 <DIO_SetPortVal+0x74>
	case DIO_PORTA:
		PORTA = Val;
     e32:	eb e3       	ldi	r30, 0x3B	; 59
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	80 83       	st	Z, r24
     e3a:	0e c0       	rjmp	.+28     	; 0xe58 <DIO_SetPortVal+0x74>
		break;
	case DIO_PORTB:
		PORTB = Val;
     e3c:	e8 e3       	ldi	r30, 0x38	; 56
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	80 83       	st	Z, r24
     e44:	09 c0       	rjmp	.+18     	; 0xe58 <DIO_SetPortVal+0x74>
		break;
	case DIO_PORTC:
		PORTC = Val;
     e46:	e5 e3       	ldi	r30, 0x35	; 53
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	80 83       	st	Z, r24
     e4e:	04 c0       	rjmp	.+8      	; 0xe58 <DIO_SetPortVal+0x74>
		break;
	case DIO_PORTD:
		PORTD = Val;
     e50:	e2 e3       	ldi	r30, 0x32	; 50
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	80 83       	st	Z, r24
		break;

	}
}
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <DIO_SetPinVal>:

void DIO_SetPinVal(uint8 Port,uint8 Pin,Value Val){
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <DIO_SetPinVal+0x6>
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <DIO_SetPinVal+0x8>
     e6e:	0f 92       	push	r0
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	6a 83       	std	Y+2, r22	; 0x02
     e78:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port) {
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	3d 83       	std	Y+5, r19	; 0x05
     e82:	2c 83       	std	Y+4, r18	; 0x04
     e84:	8c 81       	ldd	r24, Y+4	; 0x04
     e86:	9d 81       	ldd	r25, Y+5	; 0x05
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	91 05       	cpc	r25, r1
     e8c:	09 f4       	brne	.+2      	; 0xe90 <DIO_SetPinVal+0x2a>
     e8e:	43 c0       	rjmp	.+134    	; 0xf16 <DIO_SetPinVal+0xb0>
     e90:	2c 81       	ldd	r18, Y+4	; 0x04
     e92:	3d 81       	ldd	r19, Y+5	; 0x05
     e94:	22 30       	cpi	r18, 0x02	; 2
     e96:	31 05       	cpc	r19, r1
     e98:	2c f4       	brge	.+10     	; 0xea4 <DIO_SetPinVal+0x3e>
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	9d 81       	ldd	r25, Y+5	; 0x05
     e9e:	00 97       	sbiw	r24, 0x00	; 0
     ea0:	71 f0       	breq	.+28     	; 0xebe <DIO_SetPinVal+0x58>
     ea2:	bc c0       	rjmp	.+376    	; 0x101c <DIO_SetPinVal+0x1b6>
     ea4:	2c 81       	ldd	r18, Y+4	; 0x04
     ea6:	3d 81       	ldd	r19, Y+5	; 0x05
     ea8:	22 30       	cpi	r18, 0x02	; 2
     eaa:	31 05       	cpc	r19, r1
     eac:	09 f4       	brne	.+2      	; 0xeb0 <DIO_SetPinVal+0x4a>
     eae:	5f c0       	rjmp	.+190    	; 0xf6e <DIO_SetPinVal+0x108>
     eb0:	8c 81       	ldd	r24, Y+4	; 0x04
     eb2:	9d 81       	ldd	r25, Y+5	; 0x05
     eb4:	83 30       	cpi	r24, 0x03	; 3
     eb6:	91 05       	cpc	r25, r1
     eb8:	09 f4       	brne	.+2      	; 0xebc <DIO_SetPinVal+0x56>
     eba:	85 c0       	rjmp	.+266    	; 0xfc6 <DIO_SetPinVal+0x160>
     ebc:	af c0       	rjmp	.+350    	; 0x101c <DIO_SetPinVal+0x1b6>
	case DIO_PORTA:
		if (Val == HIGH) {
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	a1 f4       	brne	.+40     	; 0xeec <DIO_SetPinVal+0x86>
			SET_BIT(PORTA, Pin);
     ec4:	ab e3       	ldi	r26, 0x3B	; 59
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	eb e3       	ldi	r30, 0x3B	; 59
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	48 2f       	mov	r20, r24
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	02 2e       	mov	r0, r18
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <DIO_SetPinVal+0x7c>
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	0a 94       	dec	r0
     ee4:	e2 f7       	brpl	.-8      	; 0xede <DIO_SetPinVal+0x78>
     ee6:	84 2b       	or	r24, r20
     ee8:	8c 93       	st	X, r24
     eea:	98 c0       	rjmp	.+304    	; 0x101c <DIO_SetPinVal+0x1b6>
		} else {
			CLEAR_BIT(PORTA, Pin);
     eec:	ab e3       	ldi	r26, 0x3B	; 59
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	eb e3       	ldi	r30, 0x3B	; 59
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 2e       	mov	r0, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <DIO_SetPinVal+0xa4>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <DIO_SetPinVal+0xa0>
     f0e:	80 95       	com	r24
     f10:	84 23       	and	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	83 c0       	rjmp	.+262    	; 0x101c <DIO_SetPinVal+0x1b6>
		}
		break;
	case DIO_PORTB:
		if (Val == HIGH) {
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	81 30       	cpi	r24, 0x01	; 1
     f1a:	a1 f4       	brne	.+40     	; 0xf44 <DIO_SetPinVal+0xde>
			SET_BIT(PORTB, Pin);
     f1c:	a8 e3       	ldi	r26, 0x38	; 56
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e8 e3       	ldi	r30, 0x38	; 56
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	48 2f       	mov	r20, r24
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 2e       	mov	r0, r18
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <DIO_SetPinVal+0xd4>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <DIO_SetPinVal+0xd0>
     f3e:	84 2b       	or	r24, r20
     f40:	8c 93       	st	X, r24
     f42:	6c c0       	rjmp	.+216    	; 0x101c <DIO_SetPinVal+0x1b6>
		} else {
			CLEAR_BIT(PORTB, Pin);
     f44:	a8 e3       	ldi	r26, 0x38	; 56
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e8 e3       	ldi	r30, 0x38	; 56
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 2e       	mov	r0, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <DIO_SetPinVal+0xfc>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	0a 94       	dec	r0
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <DIO_SetPinVal+0xf8>
     f66:	80 95       	com	r24
     f68:	84 23       	and	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	57 c0       	rjmp	.+174    	; 0x101c <DIO_SetPinVal+0x1b6>
		}
		break;
	case DIO_PORTC:
		if (Val == HIGH) {
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	a1 f4       	brne	.+40     	; 0xf9c <DIO_SetPinVal+0x136>
			SET_BIT(PORTC, Pin);
     f74:	a5 e3       	ldi	r26, 0x35	; 53
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e5 e3       	ldi	r30, 0x35	; 53
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	48 2f       	mov	r20, r24
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 2e       	mov	r0, r18
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <DIO_SetPinVal+0x12c>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	0a 94       	dec	r0
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <DIO_SetPinVal+0x128>
     f96:	84 2b       	or	r24, r20
     f98:	8c 93       	st	X, r24
     f9a:	40 c0       	rjmp	.+128    	; 0x101c <DIO_SetPinVal+0x1b6>
		} else {
			CLEAR_BIT(PORTC, Pin);
     f9c:	a5 e3       	ldi	r26, 0x35	; 53
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e5 e3       	ldi	r30, 0x35	; 53
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	48 2f       	mov	r20, r24
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	02 2e       	mov	r0, r18
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <DIO_SetPinVal+0x154>
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	0a 94       	dec	r0
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <DIO_SetPinVal+0x150>
     fbe:	80 95       	com	r24
     fc0:	84 23       	and	r24, r20
     fc2:	8c 93       	st	X, r24
     fc4:	2b c0       	rjmp	.+86     	; 0x101c <DIO_SetPinVal+0x1b6>
		}
		break;
	case DIO_PORTD:
		if (Val == HIGH) {
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	81 30       	cpi	r24, 0x01	; 1
     fca:	a1 f4       	brne	.+40     	; 0xff4 <DIO_SetPinVal+0x18e>
			SET_BIT(PORTD, Pin);
     fcc:	a2 e3       	ldi	r26, 0x32	; 50
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e2 e3       	ldi	r30, 0x32	; 50
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	48 2f       	mov	r20, r24
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	02 2e       	mov	r0, r18
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <DIO_SetPinVal+0x184>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	0a 94       	dec	r0
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <DIO_SetPinVal+0x180>
     fee:	84 2b       	or	r24, r20
     ff0:	8c 93       	st	X, r24
     ff2:	14 c0       	rjmp	.+40     	; 0x101c <DIO_SetPinVal+0x1b6>
		} else {
			CLEAR_BIT(PORTD, Pin);
     ff4:	a2 e3       	ldi	r26, 0x32	; 50
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e2 e3       	ldi	r30, 0x32	; 50
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	48 2f       	mov	r20, r24
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 2e       	mov	r0, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <DIO_SetPinVal+0x1ac>
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	0a 94       	dec	r0
    1014:	e2 f7       	brpl	.-8      	; 0x100e <DIO_SetPinVal+0x1a8>
    1016:	80 95       	com	r24
    1018:	84 23       	and	r24, r20
    101a:	8c 93       	st	X, r24
		}
		break;

	}
}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <DIO_ReadPort>:
void DIO_ReadPort (uint8 Port, uint8* Val){
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	00 d0       	rcall	.+0      	; 0x1032 <DIO_ReadPort+0x6>
    1032:	00 d0       	rcall	.+0      	; 0x1034 <DIO_ReadPort+0x8>
    1034:	0f 92       	push	r0
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	89 83       	std	Y+1, r24	; 0x01
    103c:	7b 83       	std	Y+3, r23	; 0x03
    103e:	6a 83       	std	Y+2, r22	; 0x02
	switch (Port) {
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	3d 83       	std	Y+5, r19	; 0x05
    1048:	2c 83       	std	Y+4, r18	; 0x04
    104a:	8c 81       	ldd	r24, Y+4	; 0x04
    104c:	9d 81       	ldd	r25, Y+5	; 0x05
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	91 05       	cpc	r25, r1
    1052:	e1 f0       	breq	.+56     	; 0x108c <DIO_ReadPort+0x60>
    1054:	2c 81       	ldd	r18, Y+4	; 0x04
    1056:	3d 81       	ldd	r19, Y+5	; 0x05
    1058:	22 30       	cpi	r18, 0x02	; 2
    105a:	31 05       	cpc	r19, r1
    105c:	2c f4       	brge	.+10     	; 0x1068 <DIO_ReadPort+0x3c>
    105e:	8c 81       	ldd	r24, Y+4	; 0x04
    1060:	9d 81       	ldd	r25, Y+5	; 0x05
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	61 f0       	breq	.+24     	; 0x107e <DIO_ReadPort+0x52>
    1066:	26 c0       	rjmp	.+76     	; 0x10b4 <DIO_ReadPort+0x88>
    1068:	2c 81       	ldd	r18, Y+4	; 0x04
    106a:	3d 81       	ldd	r19, Y+5	; 0x05
    106c:	22 30       	cpi	r18, 0x02	; 2
    106e:	31 05       	cpc	r19, r1
    1070:	a1 f0       	breq	.+40     	; 0x109a <DIO_ReadPort+0x6e>
    1072:	8c 81       	ldd	r24, Y+4	; 0x04
    1074:	9d 81       	ldd	r25, Y+5	; 0x05
    1076:	83 30       	cpi	r24, 0x03	; 3
    1078:	91 05       	cpc	r25, r1
    107a:	b1 f0       	breq	.+44     	; 0x10a8 <DIO_ReadPort+0x7c>
    107c:	1b c0       	rjmp	.+54     	; 0x10b4 <DIO_ReadPort+0x88>
	case DIO_PORTA:
		*Val=PINA;
    107e:	e9 e3       	ldi	r30, 0x39	; 57
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	ea 81       	ldd	r30, Y+2	; 0x02
    1086:	fb 81       	ldd	r31, Y+3	; 0x03
    1088:	80 83       	st	Z, r24
    108a:	14 c0       	rjmp	.+40     	; 0x10b4 <DIO_ReadPort+0x88>
		break;
	case DIO_PORTB:
		*Val=PINB;
    108c:	e6 e3       	ldi	r30, 0x36	; 54
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	ea 81       	ldd	r30, Y+2	; 0x02
    1094:	fb 81       	ldd	r31, Y+3	; 0x03
    1096:	80 83       	st	Z, r24
    1098:	0d c0       	rjmp	.+26     	; 0x10b4 <DIO_ReadPort+0x88>
		break;
	case DIO_PORTC:
		*Val=PINC;
    109a:	e3 e3       	ldi	r30, 0x33	; 51
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	ea 81       	ldd	r30, Y+2	; 0x02
    10a2:	fb 81       	ldd	r31, Y+3	; 0x03
    10a4:	80 83       	st	Z, r24
    10a6:	06 c0       	rjmp	.+12     	; 0x10b4 <DIO_ReadPort+0x88>
		break;
	case DIO_PORTD:
		*Val=PIND;
    10a8:	e0 e3       	ldi	r30, 0x30	; 48
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	ea 81       	ldd	r30, Y+2	; 0x02
    10b0:	fb 81       	ldd	r31, Y+3	; 0x03
    10b2:	80 83       	st	Z, r24
		break;

	}
}
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <DIO_ReadPin>:
uint8 DIO_ReadPin(uint8 Port,uint8 Pin){
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <DIO_ReadPin+0x6>
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <DIO_ReadPin+0x8>
    10cc:	0f 92       	push	r0
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	8a 83       	std	Y+2, r24	; 0x02
    10d4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Val =0;
    10d6:	19 82       	std	Y+1, r1	; 0x01
	switch (Port) {
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	3d 83       	std	Y+5, r19	; 0x05
    10e0:	2c 83       	std	Y+4, r18	; 0x04
    10e2:	4c 81       	ldd	r20, Y+4	; 0x04
    10e4:	5d 81       	ldd	r21, Y+5	; 0x05
    10e6:	41 30       	cpi	r20, 0x01	; 1
    10e8:	51 05       	cpc	r21, r1
    10ea:	41 f1       	breq	.+80     	; 0x113c <DIO_ReadPin+0x78>
    10ec:	8c 81       	ldd	r24, Y+4	; 0x04
    10ee:	9d 81       	ldd	r25, Y+5	; 0x05
    10f0:	82 30       	cpi	r24, 0x02	; 2
    10f2:	91 05       	cpc	r25, r1
    10f4:	34 f4       	brge	.+12     	; 0x1102 <DIO_ReadPin+0x3e>
    10f6:	2c 81       	ldd	r18, Y+4	; 0x04
    10f8:	3d 81       	ldd	r19, Y+5	; 0x05
    10fa:	21 15       	cp	r18, r1
    10fc:	31 05       	cpc	r19, r1
    10fe:	61 f0       	breq	.+24     	; 0x1118 <DIO_ReadPin+0x54>
    1100:	52 c0       	rjmp	.+164    	; 0x11a6 <DIO_ReadPin+0xe2>
    1102:	4c 81       	ldd	r20, Y+4	; 0x04
    1104:	5d 81       	ldd	r21, Y+5	; 0x05
    1106:	42 30       	cpi	r20, 0x02	; 2
    1108:	51 05       	cpc	r21, r1
    110a:	51 f1       	breq	.+84     	; 0x1160 <DIO_ReadPin+0x9c>
    110c:	8c 81       	ldd	r24, Y+4	; 0x04
    110e:	9d 81       	ldd	r25, Y+5	; 0x05
    1110:	83 30       	cpi	r24, 0x03	; 3
    1112:	91 05       	cpc	r25, r1
    1114:	b9 f1       	breq	.+110    	; 0x1184 <DIO_ReadPin+0xc0>
    1116:	47 c0       	rjmp	.+142    	; 0x11a6 <DIO_ReadPin+0xe2>
	case DIO_PORTA:
		Val=GET_BIT(PINA,Pin);
    1118:	e9 e3       	ldi	r30, 0x39	; 57
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	a9 01       	movw	r20, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_ReadPin+0x6c>
    112c:	55 95       	asr	r21
    112e:	47 95       	ror	r20
    1130:	8a 95       	dec	r24
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_ReadPin+0x68>
    1134:	ca 01       	movw	r24, r20
    1136:	81 70       	andi	r24, 0x01	; 1
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	35 c0       	rjmp	.+106    	; 0x11a6 <DIO_ReadPin+0xe2>
		break;
	case DIO_PORTB:
		Val=GET_BIT(PINB,Pin);
    113c:	e6 e3       	ldi	r30, 0x36	; 54
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	a9 01       	movw	r20, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_ReadPin+0x90>
    1150:	55 95       	asr	r21
    1152:	47 95       	ror	r20
    1154:	8a 95       	dec	r24
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_ReadPin+0x8c>
    1158:	ca 01       	movw	r24, r20
    115a:	81 70       	andi	r24, 0x01	; 1
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	23 c0       	rjmp	.+70     	; 0x11a6 <DIO_ReadPin+0xe2>
		break;
	case DIO_PORTC:
		Val=GET_BIT(PINC,Pin);
    1160:	e3 e3       	ldi	r30, 0x33	; 51
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	88 2f       	mov	r24, r24
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	a9 01       	movw	r20, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <DIO_ReadPin+0xb4>
    1174:	55 95       	asr	r21
    1176:	47 95       	ror	r20
    1178:	8a 95       	dec	r24
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <DIO_ReadPin+0xb0>
    117c:	ca 01       	movw	r24, r20
    117e:	81 70       	andi	r24, 0x01	; 1
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	11 c0       	rjmp	.+34     	; 0x11a6 <DIO_ReadPin+0xe2>
		break;
	case DIO_PORTD:
		Val=GET_BIT(PIND,Pin);
    1184:	e0 e3       	ldi	r30, 0x30	; 48
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	88 2f       	mov	r24, r24
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	a9 01       	movw	r20, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <DIO_ReadPin+0xd8>
    1198:	55 95       	asr	r21
    119a:	47 95       	ror	r20
    119c:	8a 95       	dec	r24
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <DIO_ReadPin+0xd4>
    11a0:	ca 01       	movw	r24, r20
    11a2:	81 70       	andi	r24, 0x01	; 1
    11a4:	89 83       	std	Y+1, r24	; 0x01
		break;

	}
	return Val;
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <DIO_TogglePin>:

void DIO_TogglePin(uint8 Port,uint8 Pin){
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	00 d0       	rcall	.+0      	; 0x11be <DIO_TogglePin+0x6>
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <DIO_TogglePin+0x8>
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	89 83       	std	Y+1, r24	; 0x01
    11c6:	6a 83       	std	Y+2, r22	; 0x02
	switch (Port) {
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	3c 83       	std	Y+4, r19	; 0x04
    11d0:	2b 83       	std	Y+3, r18	; 0x03
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	81 30       	cpi	r24, 0x01	; 1
    11d8:	91 05       	cpc	r25, r1
    11da:	49 f1       	breq	.+82     	; 0x122e <DIO_TogglePin+0x76>
    11dc:	2b 81       	ldd	r18, Y+3	; 0x03
    11de:	3c 81       	ldd	r19, Y+4	; 0x04
    11e0:	22 30       	cpi	r18, 0x02	; 2
    11e2:	31 05       	cpc	r19, r1
    11e4:	2c f4       	brge	.+10     	; 0x11f0 <DIO_TogglePin+0x38>
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ea:	00 97       	sbiw	r24, 0x00	; 0
    11ec:	61 f0       	breq	.+24     	; 0x1206 <DIO_TogglePin+0x4e>
    11ee:	5a c0       	rjmp	.+180    	; 0x12a4 <DIO_TogglePin+0xec>
    11f0:	2b 81       	ldd	r18, Y+3	; 0x03
    11f2:	3c 81       	ldd	r19, Y+4	; 0x04
    11f4:	22 30       	cpi	r18, 0x02	; 2
    11f6:	31 05       	cpc	r19, r1
    11f8:	71 f1       	breq	.+92     	; 0x1256 <DIO_TogglePin+0x9e>
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	9c 81       	ldd	r25, Y+4	; 0x04
    11fe:	83 30       	cpi	r24, 0x03	; 3
    1200:	91 05       	cpc	r25, r1
    1202:	e9 f1       	breq	.+122    	; 0x127e <DIO_TogglePin+0xc6>
    1204:	4f c0       	rjmp	.+158    	; 0x12a4 <DIO_TogglePin+0xec>
	case DIO_PORTA:
		TOGGLE_BIT(PORTA,Pin);
    1206:	ab e3       	ldi	r26, 0x3B	; 59
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	eb e3       	ldi	r30, 0x3B	; 59
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	48 2f       	mov	r20, r24
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 2e       	mov	r0, r18
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <DIO_TogglePin+0x6c>
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	0a 94       	dec	r0
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <DIO_TogglePin+0x68>
    1228:	84 27       	eor	r24, r20
    122a:	8c 93       	st	X, r24
    122c:	3b c0       	rjmp	.+118    	; 0x12a4 <DIO_TogglePin+0xec>
		break;
	case DIO_PORTB:
		TOGGLE_BIT(PORTB,Pin);
    122e:	a8 e3       	ldi	r26, 0x38	; 56
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e8 e3       	ldi	r30, 0x38	; 56
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	48 2f       	mov	r20, r24
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	02 2e       	mov	r0, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <DIO_TogglePin+0x94>
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	0a 94       	dec	r0
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <DIO_TogglePin+0x90>
    1250:	84 27       	eor	r24, r20
    1252:	8c 93       	st	X, r24
    1254:	27 c0       	rjmp	.+78     	; 0x12a4 <DIO_TogglePin+0xec>
		break;
	case DIO_PORTC:
		TOGGLE_BIT(PORTC,Pin);
    1256:	a5 e3       	ldi	r26, 0x35	; 53
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e5 e3       	ldi	r30, 0x35	; 53
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	48 2f       	mov	r20, r24
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 2e       	mov	r0, r18
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <DIO_TogglePin+0xbc>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	0a 94       	dec	r0
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <DIO_TogglePin+0xb8>
    1278:	84 27       	eor	r24, r20
    127a:	8c 93       	st	X, r24
    127c:	13 c0       	rjmp	.+38     	; 0x12a4 <DIO_TogglePin+0xec>
		break;
	case DIO_PORTD:
		TOGGLE_BIT(PORTD,Pin);
    127e:	a2 e3       	ldi	r26, 0x32	; 50
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e2 e3       	ldi	r30, 0x32	; 50
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	48 2f       	mov	r20, r24
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 2e       	mov	r0, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <DIO_TogglePin+0xe4>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	0a 94       	dec	r0
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <DIO_TogglePin+0xe0>
    12a0:	84 27       	eor	r24, r20
    12a2:	8c 93       	st	X, r24
		break;

	}
}
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <LCD_Init>:
#define F_CPU 16000000

#include "LCD.h"
#include <util/delay.h>

void LCD_Init(void){
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	6c 97       	sbiw	r28, 0x1c	; 28
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	de bf       	out	0x3e, r29	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	cd bf       	out	0x3d, r28	; 61
DIO_SetPinDir(LCD_4BIT_CMD_PORT, LCD_RS_PIN, OUTPUT);
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	63 e0       	ldi	r22, 0x03	; 3
    12ca:	41 e0       	ldi	r20, 0x01	; 1
    12cc:	0e 94 0f 06 	call	0xc1e	; 0xc1e <DIO_SetPinDir>
DIO_SetPinDir(LCD_4BIT_CMD_PORT, LCD_E_PIN, OUTPUT);
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	62 e0       	ldi	r22, 0x02	; 2
    12d4:	41 e0       	ldi	r20, 0x01	; 1
    12d6:	0e 94 0f 06 	call	0xc1e	; 0xc1e <DIO_SetPinDir>

DIO_SetPinDir(LCD_4BIT_DATA_PORT, LCD_D4, OUTPUT);
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	41 e0       	ldi	r20, 0x01	; 1
    12e0:	0e 94 0f 06 	call	0xc1e	; 0xc1e <DIO_SetPinDir>
DIO_SetPinDir(LCD_4BIT_DATA_PORT, LCD_D5, OUTPUT);
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	61 e0       	ldi	r22, 0x01	; 1
    12e8:	41 e0       	ldi	r20, 0x01	; 1
    12ea:	0e 94 0f 06 	call	0xc1e	; 0xc1e <DIO_SetPinDir>
DIO_SetPinDir(LCD_4BIT_DATA_PORT, LCD_D6, OUTPUT);
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	62 e0       	ldi	r22, 0x02	; 2
    12f2:	41 e0       	ldi	r20, 0x01	; 1
    12f4:	0e 94 0f 06 	call	0xc1e	; 0xc1e <DIO_SetPinDir>
DIO_SetPinDir(LCD_4BIT_DATA_PORT, LCD_D7, OUTPUT);
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	64 e0       	ldi	r22, 0x04	; 4
    12fc:	41 e0       	ldi	r20, 0x01	; 1
    12fe:	0e 94 0f 06 	call	0xc1e	; 0xc1e <DIO_SetPinDir>
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	a0 ea       	ldi	r26, 0xA0	; 160
    1308:	b1 e4       	ldi	r27, 0x41	; 65
    130a:	89 8f       	std	Y+25, r24	; 0x19
    130c:	9a 8f       	std	Y+26, r25	; 0x1a
    130e:	ab 8f       	std	Y+27, r26	; 0x1b
    1310:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1312:	69 8d       	ldd	r22, Y+25	; 0x19
    1314:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1316:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1318:	9c 8d       	ldd	r25, Y+28	; 0x1c
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	4a e7       	ldi	r20, 0x7A	; 122
    1320:	55 e4       	ldi	r21, 0x45	; 69
    1322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1326:	dc 01       	movw	r26, r24
    1328:	cb 01       	movw	r24, r22
    132a:	8d 8b       	std	Y+21, r24	; 0x15
    132c:	9e 8b       	std	Y+22, r25	; 0x16
    132e:	af 8b       	std	Y+23, r26	; 0x17
    1330:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1332:	6d 89       	ldd	r22, Y+21	; 0x15
    1334:	7e 89       	ldd	r23, Y+22	; 0x16
    1336:	8f 89       	ldd	r24, Y+23	; 0x17
    1338:	98 8d       	ldd	r25, Y+24	; 0x18
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	40 e8       	ldi	r20, 0x80	; 128
    1340:	5f e3       	ldi	r21, 0x3F	; 63
    1342:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1346:	88 23       	and	r24, r24
    1348:	2c f4       	brge	.+10     	; 0x1354 <LCD_Init+0xa2>
		__ticks = 1;
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	9c 8b       	std	Y+20, r25	; 0x14
    1350:	8b 8b       	std	Y+19, r24	; 0x13
    1352:	3f c0       	rjmp	.+126    	; 0x13d2 <LCD_Init+0x120>
	else if (__tmp > 65535)
    1354:	6d 89       	ldd	r22, Y+21	; 0x15
    1356:	7e 89       	ldd	r23, Y+22	; 0x16
    1358:	8f 89       	ldd	r24, Y+23	; 0x17
    135a:	98 8d       	ldd	r25, Y+24	; 0x18
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	3f ef       	ldi	r19, 0xFF	; 255
    1360:	4f e7       	ldi	r20, 0x7F	; 127
    1362:	57 e4       	ldi	r21, 0x47	; 71
    1364:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1368:	18 16       	cp	r1, r24
    136a:	4c f5       	brge	.+82     	; 0x13be <LCD_Init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    136c:	69 8d       	ldd	r22, Y+25	; 0x19
    136e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1370:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1372:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	40 e2       	ldi	r20, 0x20	; 32
    137a:	51 e4       	ldi	r21, 0x41	; 65
    137c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	bc 01       	movw	r22, r24
    1386:	cd 01       	movw	r24, r26
    1388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	9c 8b       	std	Y+20, r25	; 0x14
    1392:	8b 8b       	std	Y+19, r24	; 0x13
    1394:	0f c0       	rjmp	.+30     	; 0x13b4 <LCD_Init+0x102>
    1396:	80 e9       	ldi	r24, 0x90	; 144
    1398:	91 e0       	ldi	r25, 0x01	; 1
    139a:	9a 8b       	std	Y+18, r25	; 0x12
    139c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    139e:	89 89       	ldd	r24, Y+17	; 0x11
    13a0:	9a 89       	ldd	r25, Y+18	; 0x12
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	f1 f7       	brne	.-4      	; 0x13a2 <LCD_Init+0xf0>
    13a6:	9a 8b       	std	Y+18, r25	; 0x12
    13a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13aa:	8b 89       	ldd	r24, Y+19	; 0x13
    13ac:	9c 89       	ldd	r25, Y+20	; 0x14
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	9c 8b       	std	Y+20, r25	; 0x14
    13b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b4:	8b 89       	ldd	r24, Y+19	; 0x13
    13b6:	9c 89       	ldd	r25, Y+20	; 0x14
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	69 f7       	brne	.-38     	; 0x1396 <LCD_Init+0xe4>
    13bc:	14 c0       	rjmp	.+40     	; 0x13e6 <LCD_Init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13be:	6d 89       	ldd	r22, Y+21	; 0x15
    13c0:	7e 89       	ldd	r23, Y+22	; 0x16
    13c2:	8f 89       	ldd	r24, Y+23	; 0x17
    13c4:	98 8d       	ldd	r25, Y+24	; 0x18
    13c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	9c 8b       	std	Y+20, r25	; 0x14
    13d0:	8b 8b       	std	Y+19, r24	; 0x13
    13d2:	8b 89       	ldd	r24, Y+19	; 0x13
    13d4:	9c 89       	ldd	r25, Y+20	; 0x14
    13d6:	98 8b       	std	Y+16, r25	; 0x10
    13d8:	8f 87       	std	Y+15, r24	; 0x0f
    13da:	8f 85       	ldd	r24, Y+15	; 0x0f
    13dc:	98 89       	ldd	r25, Y+16	; 0x10
    13de:	01 97       	sbiw	r24, 0x01	; 1
    13e0:	f1 f7       	brne	.-4      	; 0x13de <LCD_Init+0x12c>
    13e2:	98 8b       	std	Y+16, r25	; 0x10
    13e4:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(20);

LCD_WriteCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    13e6:	83 e3       	ldi	r24, 0x33	; 51
    13e8:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <LCD_WriteCommand>
LCD_WriteCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    13ec:	82 e3       	ldi	r24, 0x32	; 50
    13ee:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <LCD_WriteCommand>
LCD_WriteCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    13f2:	88 e2       	ldi	r24, 0x28	; 40
    13f4:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <LCD_WriteCommand>
LCD_WriteCommand(LCD_CLEAR_COMMAND);
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <LCD_WriteCommand>
LCD_WriteCommand(LCD_CURSOR_OFF);
    13fe:	8c e0       	ldi	r24, 0x0C	; 12
    1400:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <LCD_WriteCommand>
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	a0 e2       	ldi	r26, 0x20	; 32
    140a:	b1 e4       	ldi	r27, 0x41	; 65
    140c:	8b 87       	std	Y+11, r24	; 0x0b
    140e:	9c 87       	std	Y+12, r25	; 0x0c
    1410:	ad 87       	std	Y+13, r26	; 0x0d
    1412:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1414:	6b 85       	ldd	r22, Y+11	; 0x0b
    1416:	7c 85       	ldd	r23, Y+12	; 0x0c
    1418:	8d 85       	ldd	r24, Y+13	; 0x0d
    141a:	9e 85       	ldd	r25, Y+14	; 0x0e
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	4a e7       	ldi	r20, 0x7A	; 122
    1422:	55 e4       	ldi	r21, 0x45	; 69
    1424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	8f 83       	std	Y+7, r24	; 0x07
    142e:	98 87       	std	Y+8, r25	; 0x08
    1430:	a9 87       	std	Y+9, r26	; 0x09
    1432:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1434:	6f 81       	ldd	r22, Y+7	; 0x07
    1436:	78 85       	ldd	r23, Y+8	; 0x08
    1438:	89 85       	ldd	r24, Y+9	; 0x09
    143a:	9a 85       	ldd	r25, Y+10	; 0x0a
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	40 e8       	ldi	r20, 0x80	; 128
    1442:	5f e3       	ldi	r21, 0x3F	; 63
    1444:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1448:	88 23       	and	r24, r24
    144a:	2c f4       	brge	.+10     	; 0x1456 <LCD_Init+0x1a4>
		__ticks = 1;
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	9e 83       	std	Y+6, r25	; 0x06
    1452:	8d 83       	std	Y+5, r24	; 0x05
    1454:	3f c0       	rjmp	.+126    	; 0x14d4 <LCD_Init+0x222>
	else if (__tmp > 65535)
    1456:	6f 81       	ldd	r22, Y+7	; 0x07
    1458:	78 85       	ldd	r23, Y+8	; 0x08
    145a:	89 85       	ldd	r24, Y+9	; 0x09
    145c:	9a 85       	ldd	r25, Y+10	; 0x0a
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	3f ef       	ldi	r19, 0xFF	; 255
    1462:	4f e7       	ldi	r20, 0x7F	; 127
    1464:	57 e4       	ldi	r21, 0x47	; 71
    1466:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    146a:	18 16       	cp	r1, r24
    146c:	4c f5       	brge	.+82     	; 0x14c0 <LCD_Init+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    146e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1470:	7c 85       	ldd	r23, Y+12	; 0x0c
    1472:	8d 85       	ldd	r24, Y+13	; 0x0d
    1474:	9e 85       	ldd	r25, Y+14	; 0x0e
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	40 e2       	ldi	r20, 0x20	; 32
    147c:	51 e4       	ldi	r21, 0x41	; 65
    147e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	bc 01       	movw	r22, r24
    1488:	cd 01       	movw	r24, r26
    148a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	9e 83       	std	Y+6, r25	; 0x06
    1494:	8d 83       	std	Y+5, r24	; 0x05
    1496:	0f c0       	rjmp	.+30     	; 0x14b6 <LCD_Init+0x204>
    1498:	80 e9       	ldi	r24, 0x90	; 144
    149a:	91 e0       	ldi	r25, 0x01	; 1
    149c:	9c 83       	std	Y+4, r25	; 0x04
    149e:	8b 83       	std	Y+3, r24	; 0x03
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	f1 f7       	brne	.-4      	; 0x14a4 <LCD_Init+0x1f2>
    14a8:	9c 83       	std	Y+4, r25	; 0x04
    14aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ac:	8d 81       	ldd	r24, Y+5	; 0x05
    14ae:	9e 81       	ldd	r25, Y+6	; 0x06
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	9e 83       	std	Y+6, r25	; 0x06
    14b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b6:	8d 81       	ldd	r24, Y+5	; 0x05
    14b8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	69 f7       	brne	.-38     	; 0x1498 <LCD_Init+0x1e6>
    14be:	14 c0       	rjmp	.+40     	; 0x14e8 <LCD_Init+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c0:	6f 81       	ldd	r22, Y+7	; 0x07
    14c2:	78 85       	ldd	r23, Y+8	; 0x08
    14c4:	89 85       	ldd	r24, Y+9	; 0x09
    14c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	9e 83       	std	Y+6, r25	; 0x06
    14d2:	8d 83       	std	Y+5, r24	; 0x05
    14d4:	8d 81       	ldd	r24, Y+5	; 0x05
    14d6:	9e 81       	ldd	r25, Y+6	; 0x06
    14d8:	9a 83       	std	Y+2, r25	; 0x02
    14da:	89 83       	std	Y+1, r24	; 0x01
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	9a 81       	ldd	r25, Y+2	; 0x02
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	f1 f7       	brne	.-4      	; 0x14e0 <LCD_Init+0x22e>
    14e4:	9a 83       	std	Y+2, r25	; 0x02
    14e6:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(10);
}
    14e8:	6c 96       	adiw	r28, 0x1c	; 28
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <LCD_WriteCommand>:

void LCD_WriteCommand(uint8 cmd){
    14fa:	0f 93       	push	r16
    14fc:	1f 93       	push	r17
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	c3 56       	subi	r28, 0x63	; 99
    1508:	d0 40       	sbci	r29, 0x00	; 0
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	fe 01       	movw	r30, r28
    1516:	ed 59       	subi	r30, 0x9D	; 157
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	80 83       	st	Z, r24
	DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_RS_PIN, LOW);
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	63 e0       	ldi	r22, 0x03	; 3
    1520:	40 e0       	ldi	r20, 0x00	; 0
    1522:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>
    1526:	fe 01       	movw	r30, r28
    1528:	e1 5a       	subi	r30, 0xA1	; 161
    152a:	ff 4f       	sbci	r31, 0xFF	; 255
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	a0 e8       	ldi	r26, 0x80	; 128
    1532:	bf e3       	ldi	r27, 0x3F	; 63
    1534:	80 83       	st	Z, r24
    1536:	91 83       	std	Z+1, r25	; 0x01
    1538:	a2 83       	std	Z+2, r26	; 0x02
    153a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    153c:	8e 01       	movw	r16, r28
    153e:	05 5a       	subi	r16, 0xA5	; 165
    1540:	1f 4f       	sbci	r17, 0xFF	; 255
    1542:	fe 01       	movw	r30, r28
    1544:	e1 5a       	subi	r30, 0xA1	; 161
    1546:	ff 4f       	sbci	r31, 0xFF	; 255
    1548:	60 81       	ld	r22, Z
    154a:	71 81       	ldd	r23, Z+1	; 0x01
    154c:	82 81       	ldd	r24, Z+2	; 0x02
    154e:	93 81       	ldd	r25, Z+3	; 0x03
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	4a e7       	ldi	r20, 0x7A	; 122
    1556:	55 e4       	ldi	r21, 0x45	; 69
    1558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	f8 01       	movw	r30, r16
    1562:	80 83       	st	Z, r24
    1564:	91 83       	std	Z+1, r25	; 0x01
    1566:	a2 83       	std	Z+2, r26	; 0x02
    1568:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    156a:	fe 01       	movw	r30, r28
    156c:	e5 5a       	subi	r30, 0xA5	; 165
    156e:	ff 4f       	sbci	r31, 0xFF	; 255
    1570:	60 81       	ld	r22, Z
    1572:	71 81       	ldd	r23, Z+1	; 0x01
    1574:	82 81       	ldd	r24, Z+2	; 0x02
    1576:	93 81       	ldd	r25, Z+3	; 0x03
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e8       	ldi	r20, 0x80	; 128
    157e:	5f e3       	ldi	r21, 0x3F	; 63
    1580:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1584:	88 23       	and	r24, r24
    1586:	44 f4       	brge	.+16     	; 0x1598 <LCD_WriteCommand+0x9e>
		__ticks = 1;
    1588:	fe 01       	movw	r30, r28
    158a:	e7 5a       	subi	r30, 0xA7	; 167
    158c:	ff 4f       	sbci	r31, 0xFF	; 255
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	91 83       	std	Z+1, r25	; 0x01
    1594:	80 83       	st	Z, r24
    1596:	64 c0       	rjmp	.+200    	; 0x1660 <LCD_WriteCommand+0x166>
	else if (__tmp > 65535)
    1598:	fe 01       	movw	r30, r28
    159a:	e5 5a       	subi	r30, 0xA5	; 165
    159c:	ff 4f       	sbci	r31, 0xFF	; 255
    159e:	60 81       	ld	r22, Z
    15a0:	71 81       	ldd	r23, Z+1	; 0x01
    15a2:	82 81       	ldd	r24, Z+2	; 0x02
    15a4:	93 81       	ldd	r25, Z+3	; 0x03
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	3f ef       	ldi	r19, 0xFF	; 255
    15aa:	4f e7       	ldi	r20, 0x7F	; 127
    15ac:	57 e4       	ldi	r21, 0x47	; 71
    15ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15b2:	18 16       	cp	r1, r24
    15b4:	0c f0       	brlt	.+2      	; 0x15b8 <LCD_WriteCommand+0xbe>
    15b6:	43 c0       	rjmp	.+134    	; 0x163e <LCD_WriteCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b8:	fe 01       	movw	r30, r28
    15ba:	e1 5a       	subi	r30, 0xA1	; 161
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	60 81       	ld	r22, Z
    15c0:	71 81       	ldd	r23, Z+1	; 0x01
    15c2:	82 81       	ldd	r24, Z+2	; 0x02
    15c4:	93 81       	ldd	r25, Z+3	; 0x03
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 e2       	ldi	r20, 0x20	; 32
    15cc:	51 e4       	ldi	r21, 0x41	; 65
    15ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	8e 01       	movw	r16, r28
    15d8:	07 5a       	subi	r16, 0xA7	; 167
    15da:	1f 4f       	sbci	r17, 0xFF	; 255
    15dc:	bc 01       	movw	r22, r24
    15de:	cd 01       	movw	r24, r26
    15e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	f8 01       	movw	r30, r16
    15ea:	91 83       	std	Z+1, r25	; 0x01
    15ec:	80 83       	st	Z, r24
    15ee:	1f c0       	rjmp	.+62     	; 0x162e <LCD_WriteCommand+0x134>
    15f0:	fe 01       	movw	r30, r28
    15f2:	e9 5a       	subi	r30, 0xA9	; 169
    15f4:	ff 4f       	sbci	r31, 0xFF	; 255
    15f6:	80 e9       	ldi	r24, 0x90	; 144
    15f8:	91 e0       	ldi	r25, 0x01	; 1
    15fa:	91 83       	std	Z+1, r25	; 0x01
    15fc:	80 83       	st	Z, r24
    15fe:	fe 01       	movw	r30, r28
    1600:	e9 5a       	subi	r30, 0xA9	; 169
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	80 81       	ld	r24, Z
    1606:	91 81       	ldd	r25, Z+1	; 0x01
    1608:	01 97       	sbiw	r24, 0x01	; 1
    160a:	f1 f7       	brne	.-4      	; 0x1608 <LCD_WriteCommand+0x10e>
    160c:	fe 01       	movw	r30, r28
    160e:	e9 5a       	subi	r30, 0xA9	; 169
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	91 83       	std	Z+1, r25	; 0x01
    1614:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1616:	de 01       	movw	r26, r28
    1618:	a7 5a       	subi	r26, 0xA7	; 167
    161a:	bf 4f       	sbci	r27, 0xFF	; 255
    161c:	fe 01       	movw	r30, r28
    161e:	e7 5a       	subi	r30, 0xA7	; 167
    1620:	ff 4f       	sbci	r31, 0xFF	; 255
    1622:	80 81       	ld	r24, Z
    1624:	91 81       	ldd	r25, Z+1	; 0x01
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	11 96       	adiw	r26, 0x01	; 1
    162a:	9c 93       	st	X, r25
    162c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162e:	fe 01       	movw	r30, r28
    1630:	e7 5a       	subi	r30, 0xA7	; 167
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	80 81       	ld	r24, Z
    1636:	91 81       	ldd	r25, Z+1	; 0x01
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	d1 f6       	brne	.-76     	; 0x15f0 <LCD_WriteCommand+0xf6>
    163c:	27 c0       	rjmp	.+78     	; 0x168c <LCD_WriteCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163e:	8e 01       	movw	r16, r28
    1640:	07 5a       	subi	r16, 0xA7	; 167
    1642:	1f 4f       	sbci	r17, 0xFF	; 255
    1644:	fe 01       	movw	r30, r28
    1646:	e5 5a       	subi	r30, 0xA5	; 165
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	60 81       	ld	r22, Z
    164c:	71 81       	ldd	r23, Z+1	; 0x01
    164e:	82 81       	ldd	r24, Z+2	; 0x02
    1650:	93 81       	ldd	r25, Z+3	; 0x03
    1652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	f8 01       	movw	r30, r16
    165c:	91 83       	std	Z+1, r25	; 0x01
    165e:	80 83       	st	Z, r24
    1660:	de 01       	movw	r26, r28
    1662:	ab 5a       	subi	r26, 0xAB	; 171
    1664:	bf 4f       	sbci	r27, 0xFF	; 255
    1666:	fe 01       	movw	r30, r28
    1668:	e7 5a       	subi	r30, 0xA7	; 167
    166a:	ff 4f       	sbci	r31, 0xFF	; 255
    166c:	80 81       	ld	r24, Z
    166e:	91 81       	ldd	r25, Z+1	; 0x01
    1670:	8d 93       	st	X+, r24
    1672:	9c 93       	st	X, r25
    1674:	fe 01       	movw	r30, r28
    1676:	eb 5a       	subi	r30, 0xAB	; 171
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	80 81       	ld	r24, Z
    167c:	91 81       	ldd	r25, Z+1	; 0x01
    167e:	01 97       	sbiw	r24, 0x01	; 1
    1680:	f1 f7       	brne	.-4      	; 0x167e <LCD_WriteCommand+0x184>
    1682:	fe 01       	movw	r30, r28
    1684:	eb 5a       	subi	r30, 0xAB	; 171
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	91 83       	std	Z+1, r25	; 0x01
    168a:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_E_PIN, HIGH);
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	62 e0       	ldi	r22, 0x02	; 2
    1690:	41 e0       	ldi	r20, 0x01	; 1
    1692:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>
    1696:	fe 01       	movw	r30, r28
    1698:	ef 5a       	subi	r30, 0xAF	; 175
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	a0 e8       	ldi	r26, 0x80	; 128
    16a2:	bf e3       	ldi	r27, 0x3F	; 63
    16a4:	80 83       	st	Z, r24
    16a6:	91 83       	std	Z+1, r25	; 0x01
    16a8:	a2 83       	std	Z+2, r26	; 0x02
    16aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ac:	8e 01       	movw	r16, r28
    16ae:	03 5b       	subi	r16, 0xB3	; 179
    16b0:	1f 4f       	sbci	r17, 0xFF	; 255
    16b2:	fe 01       	movw	r30, r28
    16b4:	ef 5a       	subi	r30, 0xAF	; 175
    16b6:	ff 4f       	sbci	r31, 0xFF	; 255
    16b8:	60 81       	ld	r22, Z
    16ba:	71 81       	ldd	r23, Z+1	; 0x01
    16bc:	82 81       	ldd	r24, Z+2	; 0x02
    16be:	93 81       	ldd	r25, Z+3	; 0x03
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	4a e7       	ldi	r20, 0x7A	; 122
    16c6:	55 e4       	ldi	r21, 0x45	; 69
    16c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	f8 01       	movw	r30, r16
    16d2:	80 83       	st	Z, r24
    16d4:	91 83       	std	Z+1, r25	; 0x01
    16d6:	a2 83       	std	Z+2, r26	; 0x02
    16d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16da:	fe 01       	movw	r30, r28
    16dc:	e3 5b       	subi	r30, 0xB3	; 179
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	60 81       	ld	r22, Z
    16e2:	71 81       	ldd	r23, Z+1	; 0x01
    16e4:	82 81       	ldd	r24, Z+2	; 0x02
    16e6:	93 81       	ldd	r25, Z+3	; 0x03
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e8       	ldi	r20, 0x80	; 128
    16ee:	5f e3       	ldi	r21, 0x3F	; 63
    16f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16f4:	88 23       	and	r24, r24
    16f6:	44 f4       	brge	.+16     	; 0x1708 <LCD_WriteCommand+0x20e>
		__ticks = 1;
    16f8:	fe 01       	movw	r30, r28
    16fa:	e5 5b       	subi	r30, 0xB5	; 181
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	91 83       	std	Z+1, r25	; 0x01
    1704:	80 83       	st	Z, r24
    1706:	64 c0       	rjmp	.+200    	; 0x17d0 <LCD_WriteCommand+0x2d6>
	else if (__tmp > 65535)
    1708:	fe 01       	movw	r30, r28
    170a:	e3 5b       	subi	r30, 0xB3	; 179
    170c:	ff 4f       	sbci	r31, 0xFF	; 255
    170e:	60 81       	ld	r22, Z
    1710:	71 81       	ldd	r23, Z+1	; 0x01
    1712:	82 81       	ldd	r24, Z+2	; 0x02
    1714:	93 81       	ldd	r25, Z+3	; 0x03
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	3f ef       	ldi	r19, 0xFF	; 255
    171a:	4f e7       	ldi	r20, 0x7F	; 127
    171c:	57 e4       	ldi	r21, 0x47	; 71
    171e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1722:	18 16       	cp	r1, r24
    1724:	0c f0       	brlt	.+2      	; 0x1728 <LCD_WriteCommand+0x22e>
    1726:	43 c0       	rjmp	.+134    	; 0x17ae <LCD_WriteCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1728:	fe 01       	movw	r30, r28
    172a:	ef 5a       	subi	r30, 0xAF	; 175
    172c:	ff 4f       	sbci	r31, 0xFF	; 255
    172e:	60 81       	ld	r22, Z
    1730:	71 81       	ldd	r23, Z+1	; 0x01
    1732:	82 81       	ldd	r24, Z+2	; 0x02
    1734:	93 81       	ldd	r25, Z+3	; 0x03
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	40 e2       	ldi	r20, 0x20	; 32
    173c:	51 e4       	ldi	r21, 0x41	; 65
    173e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	8e 01       	movw	r16, r28
    1748:	05 5b       	subi	r16, 0xB5	; 181
    174a:	1f 4f       	sbci	r17, 0xFF	; 255
    174c:	bc 01       	movw	r22, r24
    174e:	cd 01       	movw	r24, r26
    1750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	f8 01       	movw	r30, r16
    175a:	91 83       	std	Z+1, r25	; 0x01
    175c:	80 83       	st	Z, r24
    175e:	1f c0       	rjmp	.+62     	; 0x179e <LCD_WriteCommand+0x2a4>
    1760:	fe 01       	movw	r30, r28
    1762:	e7 5b       	subi	r30, 0xB7	; 183
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	80 e9       	ldi	r24, 0x90	; 144
    1768:	91 e0       	ldi	r25, 0x01	; 1
    176a:	91 83       	std	Z+1, r25	; 0x01
    176c:	80 83       	st	Z, r24
    176e:	fe 01       	movw	r30, r28
    1770:	e7 5b       	subi	r30, 0xB7	; 183
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	80 81       	ld	r24, Z
    1776:	91 81       	ldd	r25, Z+1	; 0x01
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	f1 f7       	brne	.-4      	; 0x1778 <LCD_WriteCommand+0x27e>
    177c:	fe 01       	movw	r30, r28
    177e:	e7 5b       	subi	r30, 0xB7	; 183
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	91 83       	std	Z+1, r25	; 0x01
    1784:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1786:	de 01       	movw	r26, r28
    1788:	a5 5b       	subi	r26, 0xB5	; 181
    178a:	bf 4f       	sbci	r27, 0xFF	; 255
    178c:	fe 01       	movw	r30, r28
    178e:	e5 5b       	subi	r30, 0xB5	; 181
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	80 81       	ld	r24, Z
    1794:	91 81       	ldd	r25, Z+1	; 0x01
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	11 96       	adiw	r26, 0x01	; 1
    179a:	9c 93       	st	X, r25
    179c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    179e:	fe 01       	movw	r30, r28
    17a0:	e5 5b       	subi	r30, 0xB5	; 181
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	80 81       	ld	r24, Z
    17a6:	91 81       	ldd	r25, Z+1	; 0x01
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	d1 f6       	brne	.-76     	; 0x1760 <LCD_WriteCommand+0x266>
    17ac:	27 c0       	rjmp	.+78     	; 0x17fc <LCD_WriteCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ae:	8e 01       	movw	r16, r28
    17b0:	05 5b       	subi	r16, 0xB5	; 181
    17b2:	1f 4f       	sbci	r17, 0xFF	; 255
    17b4:	fe 01       	movw	r30, r28
    17b6:	e3 5b       	subi	r30, 0xB3	; 179
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	60 81       	ld	r22, Z
    17bc:	71 81       	ldd	r23, Z+1	; 0x01
    17be:	82 81       	ldd	r24, Z+2	; 0x02
    17c0:	93 81       	ldd	r25, Z+3	; 0x03
    17c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	f8 01       	movw	r30, r16
    17cc:	91 83       	std	Z+1, r25	; 0x01
    17ce:	80 83       	st	Z, r24
    17d0:	de 01       	movw	r26, r28
    17d2:	a9 5b       	subi	r26, 0xB9	; 185
    17d4:	bf 4f       	sbci	r27, 0xFF	; 255
    17d6:	fe 01       	movw	r30, r28
    17d8:	e5 5b       	subi	r30, 0xB5	; 181
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	80 81       	ld	r24, Z
    17de:	91 81       	ldd	r25, Z+1	; 0x01
    17e0:	8d 93       	st	X+, r24
    17e2:	9c 93       	st	X, r25
    17e4:	fe 01       	movw	r30, r28
    17e6:	e9 5b       	subi	r30, 0xB9	; 185
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	80 81       	ld	r24, Z
    17ec:	91 81       	ldd	r25, Z+1	; 0x01
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	f1 f7       	brne	.-4      	; 0x17ee <LCD_WriteCommand+0x2f4>
    17f2:	fe 01       	movw	r30, r28
    17f4:	e9 5b       	subi	r30, 0xB9	; 185
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	91 83       	std	Z+1, r25	; 0x01
    17fa:	80 83       	st	Z, r24
	_delay_ms(1);


	DIO_SetPinVal(LCD_4BIT_DATA_PORT,LCD_D4, GET_BIT(cmd,4));
    17fc:	fe 01       	movw	r30, r28
    17fe:	ed 59       	subi	r30, 0x9D	; 157
    1800:	ff 4f       	sbci	r31, 0xFF	; 255
    1802:	80 81       	ld	r24, Z
    1804:	82 95       	swap	r24
    1806:	8f 70       	andi	r24, 0x0F	; 15
    1808:	98 2f       	mov	r25, r24
    180a:	91 70       	andi	r25, 0x01	; 1
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	60 e0       	ldi	r22, 0x00	; 0
    1810:	49 2f       	mov	r20, r25
    1812:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>
	DIO_SetPinVal(LCD_4BIT_DATA_PORT,LCD_D5, GET_BIT(cmd,5));
    1816:	fe 01       	movw	r30, r28
    1818:	ed 59       	subi	r30, 0x9D	; 157
    181a:	ff 4f       	sbci	r31, 0xFF	; 255
    181c:	80 81       	ld	r24, Z
    181e:	82 95       	swap	r24
    1820:	86 95       	lsr	r24
    1822:	87 70       	andi	r24, 0x07	; 7
    1824:	98 2f       	mov	r25, r24
    1826:	91 70       	andi	r25, 0x01	; 1
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	61 e0       	ldi	r22, 0x01	; 1
    182c:	49 2f       	mov	r20, r25
    182e:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>
	DIO_SetPinVal(LCD_4BIT_DATA_PORT,LCD_D6, GET_BIT(cmd,6));
    1832:	fe 01       	movw	r30, r28
    1834:	ed 59       	subi	r30, 0x9D	; 157
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	80 81       	ld	r24, Z
    183a:	82 95       	swap	r24
    183c:	86 95       	lsr	r24
    183e:	86 95       	lsr	r24
    1840:	83 70       	andi	r24, 0x03	; 3
    1842:	98 2f       	mov	r25, r24
    1844:	91 70       	andi	r25, 0x01	; 1
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	62 e0       	ldi	r22, 0x02	; 2
    184a:	49 2f       	mov	r20, r25
    184c:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>
	DIO_SetPinVal(LCD_4BIT_DATA_PORT,LCD_D7, GET_BIT(cmd,7));
    1850:	fe 01       	movw	r30, r28
    1852:	ed 59       	subi	r30, 0x9D	; 157
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	80 81       	ld	r24, Z
    1858:	98 2f       	mov	r25, r24
    185a:	99 1f       	adc	r25, r25
    185c:	99 27       	eor	r25, r25
    185e:	99 1f       	adc	r25, r25
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	64 e0       	ldi	r22, 0x04	; 4
    1864:	49 2f       	mov	r20, r25
    1866:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>
    186a:	fe 01       	movw	r30, r28
    186c:	ed 5b       	subi	r30, 0xBD	; 189
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	a0 e8       	ldi	r26, 0x80	; 128
    1876:	bf e3       	ldi	r27, 0x3F	; 63
    1878:	80 83       	st	Z, r24
    187a:	91 83       	std	Z+1, r25	; 0x01
    187c:	a2 83       	std	Z+2, r26	; 0x02
    187e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1880:	8e 01       	movw	r16, r28
    1882:	01 5c       	subi	r16, 0xC1	; 193
    1884:	1f 4f       	sbci	r17, 0xFF	; 255
    1886:	fe 01       	movw	r30, r28
    1888:	ed 5b       	subi	r30, 0xBD	; 189
    188a:	ff 4f       	sbci	r31, 0xFF	; 255
    188c:	60 81       	ld	r22, Z
    188e:	71 81       	ldd	r23, Z+1	; 0x01
    1890:	82 81       	ldd	r24, Z+2	; 0x02
    1892:	93 81       	ldd	r25, Z+3	; 0x03
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	4a e7       	ldi	r20, 0x7A	; 122
    189a:	55 e4       	ldi	r21, 0x45	; 69
    189c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	f8 01       	movw	r30, r16
    18a6:	80 83       	st	Z, r24
    18a8:	91 83       	std	Z+1, r25	; 0x01
    18aa:	a2 83       	std	Z+2, r26	; 0x02
    18ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18ae:	fe 01       	movw	r30, r28
    18b0:	ff 96       	adiw	r30, 0x3f	; 63
    18b2:	60 81       	ld	r22, Z
    18b4:	71 81       	ldd	r23, Z+1	; 0x01
    18b6:	82 81       	ldd	r24, Z+2	; 0x02
    18b8:	93 81       	ldd	r25, Z+3	; 0x03
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e8       	ldi	r20, 0x80	; 128
    18c0:	5f e3       	ldi	r21, 0x3F	; 63
    18c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18c6:	88 23       	and	r24, r24
    18c8:	2c f4       	brge	.+10     	; 0x18d4 <LCD_WriteCommand+0x3da>
		__ticks = 1;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	9e af       	std	Y+62, r25	; 0x3e
    18d0:	8d af       	std	Y+61, r24	; 0x3d
    18d2:	46 c0       	rjmp	.+140    	; 0x1960 <LCD_WriteCommand+0x466>
	else if (__tmp > 65535)
    18d4:	fe 01       	movw	r30, r28
    18d6:	ff 96       	adiw	r30, 0x3f	; 63
    18d8:	60 81       	ld	r22, Z
    18da:	71 81       	ldd	r23, Z+1	; 0x01
    18dc:	82 81       	ldd	r24, Z+2	; 0x02
    18de:	93 81       	ldd	r25, Z+3	; 0x03
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	3f ef       	ldi	r19, 0xFF	; 255
    18e4:	4f e7       	ldi	r20, 0x7F	; 127
    18e6:	57 e4       	ldi	r21, 0x47	; 71
    18e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ec:	18 16       	cp	r1, r24
    18ee:	64 f5       	brge	.+88     	; 0x1948 <LCD_WriteCommand+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f0:	fe 01       	movw	r30, r28
    18f2:	ed 5b       	subi	r30, 0xBD	; 189
    18f4:	ff 4f       	sbci	r31, 0xFF	; 255
    18f6:	60 81       	ld	r22, Z
    18f8:	71 81       	ldd	r23, Z+1	; 0x01
    18fa:	82 81       	ldd	r24, Z+2	; 0x02
    18fc:	93 81       	ldd	r25, Z+3	; 0x03
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	40 e2       	ldi	r20, 0x20	; 32
    1904:	51 e4       	ldi	r21, 0x41	; 65
    1906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	bc 01       	movw	r22, r24
    1910:	cd 01       	movw	r24, r26
    1912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	9e af       	std	Y+62, r25	; 0x3e
    191c:	8d af       	std	Y+61, r24	; 0x3d
    191e:	0f c0       	rjmp	.+30     	; 0x193e <LCD_WriteCommand+0x444>
    1920:	80 e9       	ldi	r24, 0x90	; 144
    1922:	91 e0       	ldi	r25, 0x01	; 1
    1924:	9c af       	std	Y+60, r25	; 0x3c
    1926:	8b af       	std	Y+59, r24	; 0x3b
    1928:	8b ad       	ldd	r24, Y+59	; 0x3b
    192a:	9c ad       	ldd	r25, Y+60	; 0x3c
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <LCD_WriteCommand+0x432>
    1930:	9c af       	std	Y+60, r25	; 0x3c
    1932:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1934:	8d ad       	ldd	r24, Y+61	; 0x3d
    1936:	9e ad       	ldd	r25, Y+62	; 0x3e
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	9e af       	std	Y+62, r25	; 0x3e
    193c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    193e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1940:	9e ad       	ldd	r25, Y+62	; 0x3e
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	69 f7       	brne	.-38     	; 0x1920 <LCD_WriteCommand+0x426>
    1946:	16 c0       	rjmp	.+44     	; 0x1974 <LCD_WriteCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1948:	fe 01       	movw	r30, r28
    194a:	ff 96       	adiw	r30, 0x3f	; 63
    194c:	60 81       	ld	r22, Z
    194e:	71 81       	ldd	r23, Z+1	; 0x01
    1950:	82 81       	ldd	r24, Z+2	; 0x02
    1952:	93 81       	ldd	r25, Z+3	; 0x03
    1954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	9e af       	std	Y+62, r25	; 0x3e
    195e:	8d af       	std	Y+61, r24	; 0x3d
    1960:	8d ad       	ldd	r24, Y+61	; 0x3d
    1962:	9e ad       	ldd	r25, Y+62	; 0x3e
    1964:	9a af       	std	Y+58, r25	; 0x3a
    1966:	89 af       	std	Y+57, r24	; 0x39
    1968:	89 ad       	ldd	r24, Y+57	; 0x39
    196a:	9a ad       	ldd	r25, Y+58	; 0x3a
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	f1 f7       	brne	.-4      	; 0x196c <LCD_WriteCommand+0x472>
    1970:	9a af       	std	Y+58, r25	; 0x3a
    1972:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);

	DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_E_PIN, LOW);
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	62 e0       	ldi	r22, 0x02	; 2
    1978:	40 e0       	ldi	r20, 0x00	; 0
    197a:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	a0 e8       	ldi	r26, 0x80	; 128
    1984:	bf e3       	ldi	r27, 0x3F	; 63
    1986:	8d ab       	std	Y+53, r24	; 0x35
    1988:	9e ab       	std	Y+54, r25	; 0x36
    198a:	af ab       	std	Y+55, r26	; 0x37
    198c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198e:	6d a9       	ldd	r22, Y+53	; 0x35
    1990:	7e a9       	ldd	r23, Y+54	; 0x36
    1992:	8f a9       	ldd	r24, Y+55	; 0x37
    1994:	98 ad       	ldd	r25, Y+56	; 0x38
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	4a e7       	ldi	r20, 0x7A	; 122
    199c:	55 e4       	ldi	r21, 0x45	; 69
    199e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	89 ab       	std	Y+49, r24	; 0x31
    19a8:	9a ab       	std	Y+50, r25	; 0x32
    19aa:	ab ab       	std	Y+51, r26	; 0x33
    19ac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19ae:	69 a9       	ldd	r22, Y+49	; 0x31
    19b0:	7a a9       	ldd	r23, Y+50	; 0x32
    19b2:	8b a9       	ldd	r24, Y+51	; 0x33
    19b4:	9c a9       	ldd	r25, Y+52	; 0x34
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e8       	ldi	r20, 0x80	; 128
    19bc:	5f e3       	ldi	r21, 0x3F	; 63
    19be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c2:	88 23       	and	r24, r24
    19c4:	2c f4       	brge	.+10     	; 0x19d0 <LCD_WriteCommand+0x4d6>
		__ticks = 1;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	98 ab       	std	Y+48, r25	; 0x30
    19cc:	8f a7       	std	Y+47, r24	; 0x2f
    19ce:	3f c0       	rjmp	.+126    	; 0x1a4e <LCD_WriteCommand+0x554>
	else if (__tmp > 65535)
    19d0:	69 a9       	ldd	r22, Y+49	; 0x31
    19d2:	7a a9       	ldd	r23, Y+50	; 0x32
    19d4:	8b a9       	ldd	r24, Y+51	; 0x33
    19d6:	9c a9       	ldd	r25, Y+52	; 0x34
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	3f ef       	ldi	r19, 0xFF	; 255
    19dc:	4f e7       	ldi	r20, 0x7F	; 127
    19de:	57 e4       	ldi	r21, 0x47	; 71
    19e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19e4:	18 16       	cp	r1, r24
    19e6:	4c f5       	brge	.+82     	; 0x1a3a <LCD_WriteCommand+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e8:	6d a9       	ldd	r22, Y+53	; 0x35
    19ea:	7e a9       	ldd	r23, Y+54	; 0x36
    19ec:	8f a9       	ldd	r24, Y+55	; 0x37
    19ee:	98 ad       	ldd	r25, Y+56	; 0x38
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e2       	ldi	r20, 0x20	; 32
    19f6:	51 e4       	ldi	r21, 0x41	; 65
    19f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	bc 01       	movw	r22, r24
    1a02:	cd 01       	movw	r24, r26
    1a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	98 ab       	std	Y+48, r25	; 0x30
    1a0e:	8f a7       	std	Y+47, r24	; 0x2f
    1a10:	0f c0       	rjmp	.+30     	; 0x1a30 <LCD_WriteCommand+0x536>
    1a12:	80 e9       	ldi	r24, 0x90	; 144
    1a14:	91 e0       	ldi	r25, 0x01	; 1
    1a16:	9e a7       	std	Y+46, r25	; 0x2e
    1a18:	8d a7       	std	Y+45, r24	; 0x2d
    1a1a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a1c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <LCD_WriteCommand+0x524>
    1a22:	9e a7       	std	Y+46, r25	; 0x2e
    1a24:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a26:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a28:	98 a9       	ldd	r25, Y+48	; 0x30
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	98 ab       	std	Y+48, r25	; 0x30
    1a2e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a30:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a32:	98 a9       	ldd	r25, Y+48	; 0x30
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	69 f7       	brne	.-38     	; 0x1a12 <LCD_WriteCommand+0x518>
    1a38:	14 c0       	rjmp	.+40     	; 0x1a62 <LCD_WriteCommand+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3a:	69 a9       	ldd	r22, Y+49	; 0x31
    1a3c:	7a a9       	ldd	r23, Y+50	; 0x32
    1a3e:	8b a9       	ldd	r24, Y+51	; 0x33
    1a40:	9c a9       	ldd	r25, Y+52	; 0x34
    1a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	98 ab       	std	Y+48, r25	; 0x30
    1a4c:	8f a7       	std	Y+47, r24	; 0x2f
    1a4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a50:	98 a9       	ldd	r25, Y+48	; 0x30
    1a52:	9c a7       	std	Y+44, r25	; 0x2c
    1a54:	8b a7       	std	Y+43, r24	; 0x2b
    1a56:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a58:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <LCD_WriteCommand+0x560>
    1a5e:	9c a7       	std	Y+44, r25	; 0x2c
    1a60:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_E_PIN, HIGH);
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	62 e0       	ldi	r22, 0x02	; 2
    1a66:	41 e0       	ldi	r20, 0x01	; 1
    1a68:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	a0 e8       	ldi	r26, 0x80	; 128
    1a72:	bf e3       	ldi	r27, 0x3F	; 63
    1a74:	8f a3       	std	Y+39, r24	; 0x27
    1a76:	98 a7       	std	Y+40, r25	; 0x28
    1a78:	a9 a7       	std	Y+41, r26	; 0x29
    1a7a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7c:	6f a1       	ldd	r22, Y+39	; 0x27
    1a7e:	78 a5       	ldd	r23, Y+40	; 0x28
    1a80:	89 a5       	ldd	r24, Y+41	; 0x29
    1a82:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	4a e7       	ldi	r20, 0x7A	; 122
    1a8a:	55 e4       	ldi	r21, 0x45	; 69
    1a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	8b a3       	std	Y+35, r24	; 0x23
    1a96:	9c a3       	std	Y+36, r25	; 0x24
    1a98:	ad a3       	std	Y+37, r26	; 0x25
    1a9a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a9c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a9e:	7c a1       	ldd	r23, Y+36	; 0x24
    1aa0:	8d a1       	ldd	r24, Y+37	; 0x25
    1aa2:	9e a1       	ldd	r25, Y+38	; 0x26
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e8       	ldi	r20, 0x80	; 128
    1aaa:	5f e3       	ldi	r21, 0x3F	; 63
    1aac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ab0:	88 23       	and	r24, r24
    1ab2:	2c f4       	brge	.+10     	; 0x1abe <LCD_WriteCommand+0x5c4>
		__ticks = 1;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	9a a3       	std	Y+34, r25	; 0x22
    1aba:	89 a3       	std	Y+33, r24	; 0x21
    1abc:	3f c0       	rjmp	.+126    	; 0x1b3c <LCD_WriteCommand+0x642>
	else if (__tmp > 65535)
    1abe:	6b a1       	ldd	r22, Y+35	; 0x23
    1ac0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ac2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ac4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	3f ef       	ldi	r19, 0xFF	; 255
    1aca:	4f e7       	ldi	r20, 0x7F	; 127
    1acc:	57 e4       	ldi	r21, 0x47	; 71
    1ace:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad2:	18 16       	cp	r1, r24
    1ad4:	4c f5       	brge	.+82     	; 0x1b28 <LCD_WriteCommand+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ad8:	78 a5       	ldd	r23, Y+40	; 0x28
    1ada:	89 a5       	ldd	r24, Y+41	; 0x29
    1adc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e2       	ldi	r20, 0x20	; 32
    1ae4:	51 e4       	ldi	r21, 0x41	; 65
    1ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	bc 01       	movw	r22, r24
    1af0:	cd 01       	movw	r24, r26
    1af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	9a a3       	std	Y+34, r25	; 0x22
    1afc:	89 a3       	std	Y+33, r24	; 0x21
    1afe:	0f c0       	rjmp	.+30     	; 0x1b1e <LCD_WriteCommand+0x624>
    1b00:	80 e9       	ldi	r24, 0x90	; 144
    1b02:	91 e0       	ldi	r25, 0x01	; 1
    1b04:	98 a3       	std	Y+32, r25	; 0x20
    1b06:	8f 8f       	std	Y+31, r24	; 0x1f
    1b08:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b0a:	98 a1       	ldd	r25, Y+32	; 0x20
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <LCD_WriteCommand+0x612>
    1b10:	98 a3       	std	Y+32, r25	; 0x20
    1b12:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b14:	89 a1       	ldd	r24, Y+33	; 0x21
    1b16:	9a a1       	ldd	r25, Y+34	; 0x22
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	9a a3       	std	Y+34, r25	; 0x22
    1b1c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b20:	9a a1       	ldd	r25, Y+34	; 0x22
    1b22:	00 97       	sbiw	r24, 0x00	; 0
    1b24:	69 f7       	brne	.-38     	; 0x1b00 <LCD_WriteCommand+0x606>
    1b26:	14 c0       	rjmp	.+40     	; 0x1b50 <LCD_WriteCommand+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b28:	6b a1       	ldd	r22, Y+35	; 0x23
    1b2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	9a a3       	std	Y+34, r25	; 0x22
    1b3a:	89 a3       	std	Y+33, r24	; 0x21
    1b3c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b3e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b40:	9e 8f       	std	Y+30, r25	; 0x1e
    1b42:	8d 8f       	std	Y+29, r24	; 0x1d
    1b44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b46:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <LCD_WriteCommand+0x64e>
    1b4c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b4e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);


	DIO_SetPinVal(LCD_4BIT_DATA_PORT,LCD_D4, GET_BIT(cmd,0));
    1b50:	fe 01       	movw	r30, r28
    1b52:	ed 59       	subi	r30, 0x9D	; 157
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	80 81       	ld	r24, Z
    1b58:	98 2f       	mov	r25, r24
    1b5a:	91 70       	andi	r25, 0x01	; 1
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	60 e0       	ldi	r22, 0x00	; 0
    1b60:	49 2f       	mov	r20, r25
    1b62:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>
	DIO_SetPinVal(LCD_4BIT_DATA_PORT,LCD_D5, GET_BIT(cmd,1));
    1b66:	fe 01       	movw	r30, r28
    1b68:	ed 59       	subi	r30, 0x9D	; 157
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	80 81       	ld	r24, Z
    1b6e:	86 95       	lsr	r24
    1b70:	98 2f       	mov	r25, r24
    1b72:	91 70       	andi	r25, 0x01	; 1
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	61 e0       	ldi	r22, 0x01	; 1
    1b78:	49 2f       	mov	r20, r25
    1b7a:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>
	DIO_SetPinVal(LCD_4BIT_DATA_PORT,LCD_D6, GET_BIT(cmd,2));
    1b7e:	fe 01       	movw	r30, r28
    1b80:	ed 59       	subi	r30, 0x9D	; 157
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	80 81       	ld	r24, Z
    1b86:	86 95       	lsr	r24
    1b88:	86 95       	lsr	r24
    1b8a:	98 2f       	mov	r25, r24
    1b8c:	91 70       	andi	r25, 0x01	; 1
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	62 e0       	ldi	r22, 0x02	; 2
    1b92:	49 2f       	mov	r20, r25
    1b94:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>
	DIO_SetPinVal(LCD_4BIT_DATA_PORT,LCD_D7, GET_BIT(cmd,3));
    1b98:	fe 01       	movw	r30, r28
    1b9a:	ed 59       	subi	r30, 0x9D	; 157
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	80 81       	ld	r24, Z
    1ba0:	86 95       	lsr	r24
    1ba2:	86 95       	lsr	r24
    1ba4:	86 95       	lsr	r24
    1ba6:	98 2f       	mov	r25, r24
    1ba8:	91 70       	andi	r25, 0x01	; 1
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	64 e0       	ldi	r22, 0x04	; 4
    1bae:	49 2f       	mov	r20, r25
    1bb0:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	a0 e8       	ldi	r26, 0x80	; 128
    1bba:	bf e3       	ldi	r27, 0x3F	; 63
    1bbc:	89 8f       	std	Y+25, r24	; 0x19
    1bbe:	9a 8f       	std	Y+26, r25	; 0x1a
    1bc0:	ab 8f       	std	Y+27, r26	; 0x1b
    1bc2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc4:	69 8d       	ldd	r22, Y+25	; 0x19
    1bc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	4a e7       	ldi	r20, 0x7A	; 122
    1bd2:	55 e4       	ldi	r21, 0x45	; 69
    1bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	8d 8b       	std	Y+21, r24	; 0x15
    1bde:	9e 8b       	std	Y+22, r25	; 0x16
    1be0:	af 8b       	std	Y+23, r26	; 0x17
    1be2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1be4:	6d 89       	ldd	r22, Y+21	; 0x15
    1be6:	7e 89       	ldd	r23, Y+22	; 0x16
    1be8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bea:	98 8d       	ldd	r25, Y+24	; 0x18
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e8       	ldi	r20, 0x80	; 128
    1bf2:	5f e3       	ldi	r21, 0x3F	; 63
    1bf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bf8:	88 23       	and	r24, r24
    1bfa:	2c f4       	brge	.+10     	; 0x1c06 <LCD_WriteCommand+0x70c>
		__ticks = 1;
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	9c 8b       	std	Y+20, r25	; 0x14
    1c02:	8b 8b       	std	Y+19, r24	; 0x13
    1c04:	3f c0       	rjmp	.+126    	; 0x1c84 <LCD_WriteCommand+0x78a>
	else if (__tmp > 65535)
    1c06:	6d 89       	ldd	r22, Y+21	; 0x15
    1c08:	7e 89       	ldd	r23, Y+22	; 0x16
    1c0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	3f ef       	ldi	r19, 0xFF	; 255
    1c12:	4f e7       	ldi	r20, 0x7F	; 127
    1c14:	57 e4       	ldi	r21, 0x47	; 71
    1c16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c1a:	18 16       	cp	r1, r24
    1c1c:	4c f5       	brge	.+82     	; 0x1c70 <LCD_WriteCommand+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e2       	ldi	r20, 0x20	; 32
    1c2c:	51 e4       	ldi	r21, 0x41	; 65
    1c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	bc 01       	movw	r22, r24
    1c38:	cd 01       	movw	r24, r26
    1c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	9c 8b       	std	Y+20, r25	; 0x14
    1c44:	8b 8b       	std	Y+19, r24	; 0x13
    1c46:	0f c0       	rjmp	.+30     	; 0x1c66 <LCD_WriteCommand+0x76c>
    1c48:	80 e9       	ldi	r24, 0x90	; 144
    1c4a:	91 e0       	ldi	r25, 0x01	; 1
    1c4c:	9a 8b       	std	Y+18, r25	; 0x12
    1c4e:	89 8b       	std	Y+17, r24	; 0x11
    1c50:	89 89       	ldd	r24, Y+17	; 0x11
    1c52:	9a 89       	ldd	r25, Y+18	; 0x12
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <LCD_WriteCommand+0x75a>
    1c58:	9a 8b       	std	Y+18, r25	; 0x12
    1c5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	9c 8b       	std	Y+20, r25	; 0x14
    1c64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c66:	8b 89       	ldd	r24, Y+19	; 0x13
    1c68:	9c 89       	ldd	r25, Y+20	; 0x14
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	69 f7       	brne	.-38     	; 0x1c48 <LCD_WriteCommand+0x74e>
    1c6e:	14 c0       	rjmp	.+40     	; 0x1c98 <LCD_WriteCommand+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c70:	6d 89       	ldd	r22, Y+21	; 0x15
    1c72:	7e 89       	ldd	r23, Y+22	; 0x16
    1c74:	8f 89       	ldd	r24, Y+23	; 0x17
    1c76:	98 8d       	ldd	r25, Y+24	; 0x18
    1c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	9c 8b       	std	Y+20, r25	; 0x14
    1c82:	8b 8b       	std	Y+19, r24	; 0x13
    1c84:	8b 89       	ldd	r24, Y+19	; 0x13
    1c86:	9c 89       	ldd	r25, Y+20	; 0x14
    1c88:	98 8b       	std	Y+16, r25	; 0x10
    1c8a:	8f 87       	std	Y+15, r24	; 0x0f
    1c8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c8e:	98 89       	ldd	r25, Y+16	; 0x10
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <LCD_WriteCommand+0x796>
    1c94:	98 8b       	std	Y+16, r25	; 0x10
    1c96:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_E_PIN, LOW);
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	62 e0       	ldi	r22, 0x02	; 2
    1c9c:	40 e0       	ldi	r20, 0x00	; 0
    1c9e:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	a0 e8       	ldi	r26, 0x80	; 128
    1ca8:	bf e3       	ldi	r27, 0x3F	; 63
    1caa:	8b 87       	std	Y+11, r24	; 0x0b
    1cac:	9c 87       	std	Y+12, r25	; 0x0c
    1cae:	ad 87       	std	Y+13, r26	; 0x0d
    1cb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	4a e7       	ldi	r20, 0x7A	; 122
    1cc0:	55 e4       	ldi	r21, 0x45	; 69
    1cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	8f 83       	std	Y+7, r24	; 0x07
    1ccc:	98 87       	std	Y+8, r25	; 0x08
    1cce:	a9 87       	std	Y+9, r26	; 0x09
    1cd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd4:	78 85       	ldd	r23, Y+8	; 0x08
    1cd6:	89 85       	ldd	r24, Y+9	; 0x09
    1cd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	40 e8       	ldi	r20, 0x80	; 128
    1ce0:	5f e3       	ldi	r21, 0x3F	; 63
    1ce2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ce6:	88 23       	and	r24, r24
    1ce8:	2c f4       	brge	.+10     	; 0x1cf4 <LCD_WriteCommand+0x7fa>
		__ticks = 1;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	9e 83       	std	Y+6, r25	; 0x06
    1cf0:	8d 83       	std	Y+5, r24	; 0x05
    1cf2:	3f c0       	rjmp	.+126    	; 0x1d72 <LCD_WriteCommand+0x878>
	else if (__tmp > 65535)
    1cf4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf6:	78 85       	ldd	r23, Y+8	; 0x08
    1cf8:	89 85       	ldd	r24, Y+9	; 0x09
    1cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	3f ef       	ldi	r19, 0xFF	; 255
    1d00:	4f e7       	ldi	r20, 0x7F	; 127
    1d02:	57 e4       	ldi	r21, 0x47	; 71
    1d04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d08:	18 16       	cp	r1, r24
    1d0a:	4c f5       	brge	.+82     	; 0x1d5e <LCD_WriteCommand+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	40 e2       	ldi	r20, 0x20	; 32
    1d1a:	51 e4       	ldi	r21, 0x41	; 65
    1d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	bc 01       	movw	r22, r24
    1d26:	cd 01       	movw	r24, r26
    1d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	9e 83       	std	Y+6, r25	; 0x06
    1d32:	8d 83       	std	Y+5, r24	; 0x05
    1d34:	0f c0       	rjmp	.+30     	; 0x1d54 <LCD_WriteCommand+0x85a>
    1d36:	80 e9       	ldi	r24, 0x90	; 144
    1d38:	91 e0       	ldi	r25, 0x01	; 1
    1d3a:	9c 83       	std	Y+4, r25	; 0x04
    1d3c:	8b 83       	std	Y+3, r24	; 0x03
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	9c 81       	ldd	r25, Y+4	; 0x04
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <LCD_WriteCommand+0x848>
    1d46:	9c 83       	std	Y+4, r25	; 0x04
    1d48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	9e 83       	std	Y+6, r25	; 0x06
    1d52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d54:	8d 81       	ldd	r24, Y+5	; 0x05
    1d56:	9e 81       	ldd	r25, Y+6	; 0x06
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	69 f7       	brne	.-38     	; 0x1d36 <LCD_WriteCommand+0x83c>
    1d5c:	14 c0       	rjmp	.+40     	; 0x1d86 <LCD_WriteCommand+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d60:	78 85       	ldd	r23, Y+8	; 0x08
    1d62:	89 85       	ldd	r24, Y+9	; 0x09
    1d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	9e 83       	std	Y+6, r25	; 0x06
    1d70:	8d 83       	std	Y+5, r24	; 0x05
    1d72:	8d 81       	ldd	r24, Y+5	; 0x05
    1d74:	9e 81       	ldd	r25, Y+6	; 0x06
    1d76:	9a 83       	std	Y+2, r25	; 0x02
    1d78:	89 83       	std	Y+1, r24	; 0x01
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <LCD_WriteCommand+0x884>
    1d82:	9a 83       	std	Y+2, r25	; 0x02
    1d84:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    1d86:	cd 59       	subi	r28, 0x9D	; 157
    1d88:	df 4f       	sbci	r29, 0xFF	; 255
    1d8a:	0f b6       	in	r0, 0x3f	; 63
    1d8c:	f8 94       	cli
    1d8e:	de bf       	out	0x3e, r29	; 62
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	cd bf       	out	0x3d, r28	; 61
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	1f 91       	pop	r17
    1d9a:	0f 91       	pop	r16
    1d9c:	08 95       	ret

00001d9e <LCD_DisplayChar>:

void LCD_DisplayChar(uint8 character){
    1d9e:	df 93       	push	r29
    1da0:	cf 93       	push	r28
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	e9 97       	sbiw	r28, 0x39	; 57
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	de bf       	out	0x3e, r29	; 62
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	cd bf       	out	0x3d, r28	; 61
    1db2:	89 af       	std	Y+57, r24	; 0x39
	DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_RS_PIN, HIGH);
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	63 e0       	ldi	r22, 0x03	; 3
    1db8:	41 e0       	ldi	r20, 0x01	; 1
    1dba:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	a0 e8       	ldi	r26, 0x80	; 128
    1dc4:	bf e3       	ldi	r27, 0x3F	; 63
    1dc6:	8d ab       	std	Y+53, r24	; 0x35
    1dc8:	9e ab       	std	Y+54, r25	; 0x36
    1dca:	af ab       	std	Y+55, r26	; 0x37
    1dcc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dce:	6d a9       	ldd	r22, Y+53	; 0x35
    1dd0:	7e a9       	ldd	r23, Y+54	; 0x36
    1dd2:	8f a9       	ldd	r24, Y+55	; 0x37
    1dd4:	98 ad       	ldd	r25, Y+56	; 0x38
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	4a e7       	ldi	r20, 0x7A	; 122
    1ddc:	55 e4       	ldi	r21, 0x45	; 69
    1dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	89 ab       	std	Y+49, r24	; 0x31
    1de8:	9a ab       	std	Y+50, r25	; 0x32
    1dea:	ab ab       	std	Y+51, r26	; 0x33
    1dec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dee:	69 a9       	ldd	r22, Y+49	; 0x31
    1df0:	7a a9       	ldd	r23, Y+50	; 0x32
    1df2:	8b a9       	ldd	r24, Y+51	; 0x33
    1df4:	9c a9       	ldd	r25, Y+52	; 0x34
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e8       	ldi	r20, 0x80	; 128
    1dfc:	5f e3       	ldi	r21, 0x3F	; 63
    1dfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e02:	88 23       	and	r24, r24
    1e04:	2c f4       	brge	.+10     	; 0x1e10 <LCD_DisplayChar+0x72>
		__ticks = 1;
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	98 ab       	std	Y+48, r25	; 0x30
    1e0c:	8f a7       	std	Y+47, r24	; 0x2f
    1e0e:	3f c0       	rjmp	.+126    	; 0x1e8e <LCD_DisplayChar+0xf0>
	else if (__tmp > 65535)
    1e10:	69 a9       	ldd	r22, Y+49	; 0x31
    1e12:	7a a9       	ldd	r23, Y+50	; 0x32
    1e14:	8b a9       	ldd	r24, Y+51	; 0x33
    1e16:	9c a9       	ldd	r25, Y+52	; 0x34
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	3f ef       	ldi	r19, 0xFF	; 255
    1e1c:	4f e7       	ldi	r20, 0x7F	; 127
    1e1e:	57 e4       	ldi	r21, 0x47	; 71
    1e20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e24:	18 16       	cp	r1, r24
    1e26:	4c f5       	brge	.+82     	; 0x1e7a <LCD_DisplayChar+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e28:	6d a9       	ldd	r22, Y+53	; 0x35
    1e2a:	7e a9       	ldd	r23, Y+54	; 0x36
    1e2c:	8f a9       	ldd	r24, Y+55	; 0x37
    1e2e:	98 ad       	ldd	r25, Y+56	; 0x38
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e2       	ldi	r20, 0x20	; 32
    1e36:	51 e4       	ldi	r21, 0x41	; 65
    1e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	bc 01       	movw	r22, r24
    1e42:	cd 01       	movw	r24, r26
    1e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	98 ab       	std	Y+48, r25	; 0x30
    1e4e:	8f a7       	std	Y+47, r24	; 0x2f
    1e50:	0f c0       	rjmp	.+30     	; 0x1e70 <LCD_DisplayChar+0xd2>
    1e52:	80 e9       	ldi	r24, 0x90	; 144
    1e54:	91 e0       	ldi	r25, 0x01	; 1
    1e56:	9e a7       	std	Y+46, r25	; 0x2e
    1e58:	8d a7       	std	Y+45, r24	; 0x2d
    1e5a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e5c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <LCD_DisplayChar+0xc0>
    1e62:	9e a7       	std	Y+46, r25	; 0x2e
    1e64:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e66:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e68:	98 a9       	ldd	r25, Y+48	; 0x30
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	98 ab       	std	Y+48, r25	; 0x30
    1e6e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e70:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e72:	98 a9       	ldd	r25, Y+48	; 0x30
    1e74:	00 97       	sbiw	r24, 0x00	; 0
    1e76:	69 f7       	brne	.-38     	; 0x1e52 <LCD_DisplayChar+0xb4>
    1e78:	14 c0       	rjmp	.+40     	; 0x1ea2 <LCD_DisplayChar+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e7a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e7c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e7e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e80:	9c a9       	ldd	r25, Y+52	; 0x34
    1e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	98 ab       	std	Y+48, r25	; 0x30
    1e8c:	8f a7       	std	Y+47, r24	; 0x2f
    1e8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e90:	98 a9       	ldd	r25, Y+48	; 0x30
    1e92:	9c a7       	std	Y+44, r25	; 0x2c
    1e94:	8b a7       	std	Y+43, r24	; 0x2b
    1e96:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e98:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <LCD_DisplayChar+0xfc>
    1e9e:	9c a7       	std	Y+44, r25	; 0x2c
    1ea0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_E_PIN, HIGH);
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	62 e0       	ldi	r22, 0x02	; 2
    1ea6:	41 e0       	ldi	r20, 0x01	; 1
    1ea8:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>

	DIO_SetPinVal(LCD_4BIT_DATA_PORT,LCD_D4, GET_BIT(character,4));
    1eac:	89 ad       	ldd	r24, Y+57	; 0x39
    1eae:	82 95       	swap	r24
    1eb0:	8f 70       	andi	r24, 0x0F	; 15
    1eb2:	98 2f       	mov	r25, r24
    1eb4:	91 70       	andi	r25, 0x01	; 1
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	60 e0       	ldi	r22, 0x00	; 0
    1eba:	49 2f       	mov	r20, r25
    1ebc:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>
	DIO_SetPinVal(LCD_4BIT_DATA_PORT,LCD_D5, GET_BIT(character,5));
    1ec0:	89 ad       	ldd	r24, Y+57	; 0x39
    1ec2:	82 95       	swap	r24
    1ec4:	86 95       	lsr	r24
    1ec6:	87 70       	andi	r24, 0x07	; 7
    1ec8:	98 2f       	mov	r25, r24
    1eca:	91 70       	andi	r25, 0x01	; 1
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	61 e0       	ldi	r22, 0x01	; 1
    1ed0:	49 2f       	mov	r20, r25
    1ed2:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>
	DIO_SetPinVal(LCD_4BIT_DATA_PORT,LCD_D6, GET_BIT(character,6));
    1ed6:	89 ad       	ldd	r24, Y+57	; 0x39
    1ed8:	82 95       	swap	r24
    1eda:	86 95       	lsr	r24
    1edc:	86 95       	lsr	r24
    1ede:	83 70       	andi	r24, 0x03	; 3
    1ee0:	98 2f       	mov	r25, r24
    1ee2:	91 70       	andi	r25, 0x01	; 1
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	62 e0       	ldi	r22, 0x02	; 2
    1ee8:	49 2f       	mov	r20, r25
    1eea:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>
	DIO_SetPinVal(LCD_4BIT_DATA_PORT,LCD_D7, GET_BIT(character,7));
    1eee:	89 ad       	ldd	r24, Y+57	; 0x39
    1ef0:	98 2f       	mov	r25, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	99 27       	eor	r25, r25
    1ef6:	99 1f       	adc	r25, r25
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	64 e0       	ldi	r22, 0x04	; 4
    1efc:	49 2f       	mov	r20, r25
    1efe:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	a0 e8       	ldi	r26, 0x80	; 128
    1f08:	bf e3       	ldi	r27, 0x3F	; 63
    1f0a:	8f a3       	std	Y+39, r24	; 0x27
    1f0c:	98 a7       	std	Y+40, r25	; 0x28
    1f0e:	a9 a7       	std	Y+41, r26	; 0x29
    1f10:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f12:	6f a1       	ldd	r22, Y+39	; 0x27
    1f14:	78 a5       	ldd	r23, Y+40	; 0x28
    1f16:	89 a5       	ldd	r24, Y+41	; 0x29
    1f18:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	4a e7       	ldi	r20, 0x7A	; 122
    1f20:	55 e4       	ldi	r21, 0x45	; 69
    1f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	8b a3       	std	Y+35, r24	; 0x23
    1f2c:	9c a3       	std	Y+36, r25	; 0x24
    1f2e:	ad a3       	std	Y+37, r26	; 0x25
    1f30:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f32:	6b a1       	ldd	r22, Y+35	; 0x23
    1f34:	7c a1       	ldd	r23, Y+36	; 0x24
    1f36:	8d a1       	ldd	r24, Y+37	; 0x25
    1f38:	9e a1       	ldd	r25, Y+38	; 0x26
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	40 e8       	ldi	r20, 0x80	; 128
    1f40:	5f e3       	ldi	r21, 0x3F	; 63
    1f42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f46:	88 23       	and	r24, r24
    1f48:	2c f4       	brge	.+10     	; 0x1f54 <LCD_DisplayChar+0x1b6>
		__ticks = 1;
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	9a a3       	std	Y+34, r25	; 0x22
    1f50:	89 a3       	std	Y+33, r24	; 0x21
    1f52:	3f c0       	rjmp	.+126    	; 0x1fd2 <LCD_DisplayChar+0x234>
	else if (__tmp > 65535)
    1f54:	6b a1       	ldd	r22, Y+35	; 0x23
    1f56:	7c a1       	ldd	r23, Y+36	; 0x24
    1f58:	8d a1       	ldd	r24, Y+37	; 0x25
    1f5a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	3f ef       	ldi	r19, 0xFF	; 255
    1f60:	4f e7       	ldi	r20, 0x7F	; 127
    1f62:	57 e4       	ldi	r21, 0x47	; 71
    1f64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f68:	18 16       	cp	r1, r24
    1f6a:	4c f5       	brge	.+82     	; 0x1fbe <LCD_DisplayChar+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f6c:	6f a1       	ldd	r22, Y+39	; 0x27
    1f6e:	78 a5       	ldd	r23, Y+40	; 0x28
    1f70:	89 a5       	ldd	r24, Y+41	; 0x29
    1f72:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e2       	ldi	r20, 0x20	; 32
    1f7a:	51 e4       	ldi	r21, 0x41	; 65
    1f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	bc 01       	movw	r22, r24
    1f86:	cd 01       	movw	r24, r26
    1f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	9a a3       	std	Y+34, r25	; 0x22
    1f92:	89 a3       	std	Y+33, r24	; 0x21
    1f94:	0f c0       	rjmp	.+30     	; 0x1fb4 <LCD_DisplayChar+0x216>
    1f96:	80 e9       	ldi	r24, 0x90	; 144
    1f98:	91 e0       	ldi	r25, 0x01	; 1
    1f9a:	98 a3       	std	Y+32, r25	; 0x20
    1f9c:	8f 8f       	std	Y+31, r24	; 0x1f
    1f9e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fa0:	98 a1       	ldd	r25, Y+32	; 0x20
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <LCD_DisplayChar+0x204>
    1fa6:	98 a3       	std	Y+32, r25	; 0x20
    1fa8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1faa:	89 a1       	ldd	r24, Y+33	; 0x21
    1fac:	9a a1       	ldd	r25, Y+34	; 0x22
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	9a a3       	std	Y+34, r25	; 0x22
    1fb2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb4:	89 a1       	ldd	r24, Y+33	; 0x21
    1fb6:	9a a1       	ldd	r25, Y+34	; 0x22
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	69 f7       	brne	.-38     	; 0x1f96 <LCD_DisplayChar+0x1f8>
    1fbc:	14 c0       	rjmp	.+40     	; 0x1fe6 <LCD_DisplayChar+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fbe:	6b a1       	ldd	r22, Y+35	; 0x23
    1fc0:	7c a1       	ldd	r23, Y+36	; 0x24
    1fc2:	8d a1       	ldd	r24, Y+37	; 0x25
    1fc4:	9e a1       	ldd	r25, Y+38	; 0x26
    1fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	9a a3       	std	Y+34, r25	; 0x22
    1fd0:	89 a3       	std	Y+33, r24	; 0x21
    1fd2:	89 a1       	ldd	r24, Y+33	; 0x21
    1fd4:	9a a1       	ldd	r25, Y+34	; 0x22
    1fd6:	9e 8f       	std	Y+30, r25	; 0x1e
    1fd8:	8d 8f       	std	Y+29, r24	; 0x1d
    1fda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fdc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <LCD_DisplayChar+0x240>
    1fe2:	9e 8f       	std	Y+30, r25	; 0x1e
    1fe4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_E_PIN, LOW);
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	62 e0       	ldi	r22, 0x02	; 2
    1fea:	40 e0       	ldi	r20, 0x00	; 0
    1fec:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	a0 e8       	ldi	r26, 0x80	; 128
    1ff6:	bf e3       	ldi	r27, 0x3F	; 63
    1ff8:	89 8f       	std	Y+25, r24	; 0x19
    1ffa:	9a 8f       	std	Y+26, r25	; 0x1a
    1ffc:	ab 8f       	std	Y+27, r26	; 0x1b
    1ffe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2000:	69 8d       	ldd	r22, Y+25	; 0x19
    2002:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2004:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2006:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	4a e7       	ldi	r20, 0x7A	; 122
    200e:	55 e4       	ldi	r21, 0x45	; 69
    2010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	8d 8b       	std	Y+21, r24	; 0x15
    201a:	9e 8b       	std	Y+22, r25	; 0x16
    201c:	af 8b       	std	Y+23, r26	; 0x17
    201e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2020:	6d 89       	ldd	r22, Y+21	; 0x15
    2022:	7e 89       	ldd	r23, Y+22	; 0x16
    2024:	8f 89       	ldd	r24, Y+23	; 0x17
    2026:	98 8d       	ldd	r25, Y+24	; 0x18
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e8       	ldi	r20, 0x80	; 128
    202e:	5f e3       	ldi	r21, 0x3F	; 63
    2030:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2034:	88 23       	and	r24, r24
    2036:	2c f4       	brge	.+10     	; 0x2042 <LCD_DisplayChar+0x2a4>
		__ticks = 1;
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9c 8b       	std	Y+20, r25	; 0x14
    203e:	8b 8b       	std	Y+19, r24	; 0x13
    2040:	3f c0       	rjmp	.+126    	; 0x20c0 <LCD_DisplayChar+0x322>
	else if (__tmp > 65535)
    2042:	6d 89       	ldd	r22, Y+21	; 0x15
    2044:	7e 89       	ldd	r23, Y+22	; 0x16
    2046:	8f 89       	ldd	r24, Y+23	; 0x17
    2048:	98 8d       	ldd	r25, Y+24	; 0x18
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	3f ef       	ldi	r19, 0xFF	; 255
    204e:	4f e7       	ldi	r20, 0x7F	; 127
    2050:	57 e4       	ldi	r21, 0x47	; 71
    2052:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2056:	18 16       	cp	r1, r24
    2058:	4c f5       	brge	.+82     	; 0x20ac <LCD_DisplayChar+0x30e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205a:	69 8d       	ldd	r22, Y+25	; 0x19
    205c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    205e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2060:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e2       	ldi	r20, 0x20	; 32
    2068:	51 e4       	ldi	r21, 0x41	; 65
    206a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	bc 01       	movw	r22, r24
    2074:	cd 01       	movw	r24, r26
    2076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	9c 8b       	std	Y+20, r25	; 0x14
    2080:	8b 8b       	std	Y+19, r24	; 0x13
    2082:	0f c0       	rjmp	.+30     	; 0x20a2 <LCD_DisplayChar+0x304>
    2084:	80 e9       	ldi	r24, 0x90	; 144
    2086:	91 e0       	ldi	r25, 0x01	; 1
    2088:	9a 8b       	std	Y+18, r25	; 0x12
    208a:	89 8b       	std	Y+17, r24	; 0x11
    208c:	89 89       	ldd	r24, Y+17	; 0x11
    208e:	9a 89       	ldd	r25, Y+18	; 0x12
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	f1 f7       	brne	.-4      	; 0x2090 <LCD_DisplayChar+0x2f2>
    2094:	9a 8b       	std	Y+18, r25	; 0x12
    2096:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2098:	8b 89       	ldd	r24, Y+19	; 0x13
    209a:	9c 89       	ldd	r25, Y+20	; 0x14
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	9c 8b       	std	Y+20, r25	; 0x14
    20a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a2:	8b 89       	ldd	r24, Y+19	; 0x13
    20a4:	9c 89       	ldd	r25, Y+20	; 0x14
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	69 f7       	brne	.-38     	; 0x2084 <LCD_DisplayChar+0x2e6>
    20aa:	14 c0       	rjmp	.+40     	; 0x20d4 <LCD_DisplayChar+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ac:	6d 89       	ldd	r22, Y+21	; 0x15
    20ae:	7e 89       	ldd	r23, Y+22	; 0x16
    20b0:	8f 89       	ldd	r24, Y+23	; 0x17
    20b2:	98 8d       	ldd	r25, Y+24	; 0x18
    20b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	9c 8b       	std	Y+20, r25	; 0x14
    20be:	8b 8b       	std	Y+19, r24	; 0x13
    20c0:	8b 89       	ldd	r24, Y+19	; 0x13
    20c2:	9c 89       	ldd	r25, Y+20	; 0x14
    20c4:	98 8b       	std	Y+16, r25	; 0x10
    20c6:	8f 87       	std	Y+15, r24	; 0x0f
    20c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ca:	98 89       	ldd	r25, Y+16	; 0x10
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	f1 f7       	brne	.-4      	; 0x20cc <LCD_DisplayChar+0x32e>
    20d0:	98 8b       	std	Y+16, r25	; 0x10
    20d2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_E_PIN, HIGH);
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	62 e0       	ldi	r22, 0x02	; 2
    20d8:	41 e0       	ldi	r20, 0x01	; 1
    20da:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>

	DIO_SetPinVal(LCD_4BIT_DATA_PORT,LCD_D4, GET_BIT(character,0));
    20de:	89 ad       	ldd	r24, Y+57	; 0x39
    20e0:	98 2f       	mov	r25, r24
    20e2:	91 70       	andi	r25, 0x01	; 1
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	60 e0       	ldi	r22, 0x00	; 0
    20e8:	49 2f       	mov	r20, r25
    20ea:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>
	DIO_SetPinVal(LCD_4BIT_DATA_PORT,LCD_D5, GET_BIT(character,1));
    20ee:	89 ad       	ldd	r24, Y+57	; 0x39
    20f0:	86 95       	lsr	r24
    20f2:	98 2f       	mov	r25, r24
    20f4:	91 70       	andi	r25, 0x01	; 1
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	61 e0       	ldi	r22, 0x01	; 1
    20fa:	49 2f       	mov	r20, r25
    20fc:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>
	DIO_SetPinVal(LCD_4BIT_DATA_PORT,LCD_D6, GET_BIT(character,2));
    2100:	89 ad       	ldd	r24, Y+57	; 0x39
    2102:	86 95       	lsr	r24
    2104:	86 95       	lsr	r24
    2106:	98 2f       	mov	r25, r24
    2108:	91 70       	andi	r25, 0x01	; 1
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	62 e0       	ldi	r22, 0x02	; 2
    210e:	49 2f       	mov	r20, r25
    2110:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>
	DIO_SetPinVal(LCD_4BIT_DATA_PORT,LCD_D7, GET_BIT(character,3));
    2114:	89 ad       	ldd	r24, Y+57	; 0x39
    2116:	86 95       	lsr	r24
    2118:	86 95       	lsr	r24
    211a:	86 95       	lsr	r24
    211c:	98 2f       	mov	r25, r24
    211e:	91 70       	andi	r25, 0x01	; 1
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	64 e0       	ldi	r22, 0x04	; 4
    2124:	49 2f       	mov	r20, r25
    2126:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	a0 e8       	ldi	r26, 0x80	; 128
    2130:	bf e3       	ldi	r27, 0x3F	; 63
    2132:	8b 87       	std	Y+11, r24	; 0x0b
    2134:	9c 87       	std	Y+12, r25	; 0x0c
    2136:	ad 87       	std	Y+13, r26	; 0x0d
    2138:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213a:	6b 85       	ldd	r22, Y+11	; 0x0b
    213c:	7c 85       	ldd	r23, Y+12	; 0x0c
    213e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2140:	9e 85       	ldd	r25, Y+14	; 0x0e
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	4a e7       	ldi	r20, 0x7A	; 122
    2148:	55 e4       	ldi	r21, 0x45	; 69
    214a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	8f 83       	std	Y+7, r24	; 0x07
    2154:	98 87       	std	Y+8, r25	; 0x08
    2156:	a9 87       	std	Y+9, r26	; 0x09
    2158:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    215a:	6f 81       	ldd	r22, Y+7	; 0x07
    215c:	78 85       	ldd	r23, Y+8	; 0x08
    215e:	89 85       	ldd	r24, Y+9	; 0x09
    2160:	9a 85       	ldd	r25, Y+10	; 0x0a
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e8       	ldi	r20, 0x80	; 128
    2168:	5f e3       	ldi	r21, 0x3F	; 63
    216a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    216e:	88 23       	and	r24, r24
    2170:	2c f4       	brge	.+10     	; 0x217c <LCD_DisplayChar+0x3de>
		__ticks = 1;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	9e 83       	std	Y+6, r25	; 0x06
    2178:	8d 83       	std	Y+5, r24	; 0x05
    217a:	3f c0       	rjmp	.+126    	; 0x21fa <LCD_DisplayChar+0x45c>
	else if (__tmp > 65535)
    217c:	6f 81       	ldd	r22, Y+7	; 0x07
    217e:	78 85       	ldd	r23, Y+8	; 0x08
    2180:	89 85       	ldd	r24, Y+9	; 0x09
    2182:	9a 85       	ldd	r25, Y+10	; 0x0a
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	3f ef       	ldi	r19, 0xFF	; 255
    2188:	4f e7       	ldi	r20, 0x7F	; 127
    218a:	57 e4       	ldi	r21, 0x47	; 71
    218c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2190:	18 16       	cp	r1, r24
    2192:	4c f5       	brge	.+82     	; 0x21e6 <LCD_DisplayChar+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2194:	6b 85       	ldd	r22, Y+11	; 0x0b
    2196:	7c 85       	ldd	r23, Y+12	; 0x0c
    2198:	8d 85       	ldd	r24, Y+13	; 0x0d
    219a:	9e 85       	ldd	r25, Y+14	; 0x0e
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e2       	ldi	r20, 0x20	; 32
    21a2:	51 e4       	ldi	r21, 0x41	; 65
    21a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	bc 01       	movw	r22, r24
    21ae:	cd 01       	movw	r24, r26
    21b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	9e 83       	std	Y+6, r25	; 0x06
    21ba:	8d 83       	std	Y+5, r24	; 0x05
    21bc:	0f c0       	rjmp	.+30     	; 0x21dc <LCD_DisplayChar+0x43e>
    21be:	80 e9       	ldi	r24, 0x90	; 144
    21c0:	91 e0       	ldi	r25, 0x01	; 1
    21c2:	9c 83       	std	Y+4, r25	; 0x04
    21c4:	8b 83       	std	Y+3, r24	; 0x03
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <LCD_DisplayChar+0x42c>
    21ce:	9c 83       	std	Y+4, r25	; 0x04
    21d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d2:	8d 81       	ldd	r24, Y+5	; 0x05
    21d4:	9e 81       	ldd	r25, Y+6	; 0x06
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	9e 83       	std	Y+6, r25	; 0x06
    21da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21dc:	8d 81       	ldd	r24, Y+5	; 0x05
    21de:	9e 81       	ldd	r25, Y+6	; 0x06
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	69 f7       	brne	.-38     	; 0x21be <LCD_DisplayChar+0x420>
    21e4:	14 c0       	rjmp	.+40     	; 0x220e <LCD_DisplayChar+0x470>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e6:	6f 81       	ldd	r22, Y+7	; 0x07
    21e8:	78 85       	ldd	r23, Y+8	; 0x08
    21ea:	89 85       	ldd	r24, Y+9	; 0x09
    21ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	8d 83       	std	Y+5, r24	; 0x05
    21fa:	8d 81       	ldd	r24, Y+5	; 0x05
    21fc:	9e 81       	ldd	r25, Y+6	; 0x06
    21fe:	9a 83       	std	Y+2, r25	; 0x02
    2200:	89 83       	std	Y+1, r24	; 0x01
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	9a 81       	ldd	r25, Y+2	; 0x02
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <LCD_DisplayChar+0x468>
    220a:	9a 83       	std	Y+2, r25	; 0x02
    220c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_E_PIN, LOW);
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	62 e0       	ldi	r22, 0x02	; 2
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>
}
    2218:	e9 96       	adiw	r28, 0x39	; 57
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	08 95       	ret

0000222a <LCD_DisplayString>:

void LCD_DisplayString(char* string){
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	00 d0       	rcall	.+0      	; 0x2230 <LCD_DisplayString+0x6>
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	9a 83       	std	Y+2, r25	; 0x02
    2236:	89 83       	std	Y+1, r24	; 0x01
    2238:	0a c0       	rjmp	.+20     	; 0x224e <LCD_DisplayString+0x24>
	while(*string != '\0'){
		LCD_DisplayChar(*string);
    223a:	e9 81       	ldd	r30, Y+1	; 0x01
    223c:	fa 81       	ldd	r31, Y+2	; 0x02
    223e:	80 81       	ld	r24, Z
    2240:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <LCD_DisplayChar>
		string++;
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	9a 81       	ldd	r25, Y+2	; 0x02
    2248:	01 96       	adiw	r24, 0x01	; 1
    224a:	9a 83       	std	Y+2, r25	; 0x02
    224c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_E_PIN, LOW);
}

void LCD_DisplayString(char* string){
	while(*string != '\0'){
    224e:	e9 81       	ldd	r30, Y+1	; 0x01
    2250:	fa 81       	ldd	r31, Y+2	; 0x02
    2252:	80 81       	ld	r24, Z
    2254:	88 23       	and	r24, r24
    2256:	89 f7       	brne	.-30     	; 0x223a <LCD_DisplayString+0x10>
		LCD_DisplayChar(*string);
		string++;
	}
}
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	08 95       	ret

00002262 <LCD_moveCursor>:
void LCD_moveCursor(uint8 row,uint8 col)
{
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	00 d0       	rcall	.+0      	; 0x2268 <LCD_moveCursor+0x6>
    2268:	00 d0       	rcall	.+0      	; 0x226a <LCD_moveCursor+0x8>
    226a:	0f 92       	push	r0
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	8a 83       	std	Y+2, r24	; 0x02
    2272:	6b 83       	std	Y+3, r22	; 0x03
uint8 lcd_memory_address;;

	switch(row)
    2274:	8a 81       	ldd	r24, Y+2	; 0x02
    2276:	28 2f       	mov	r18, r24
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	3d 83       	std	Y+5, r19	; 0x05
    227c:	2c 83       	std	Y+4, r18	; 0x04
    227e:	8c 81       	ldd	r24, Y+4	; 0x04
    2280:	9d 81       	ldd	r25, Y+5	; 0x05
    2282:	81 30       	cpi	r24, 0x01	; 1
    2284:	91 05       	cpc	r25, r1
    2286:	c1 f0       	breq	.+48     	; 0x22b8 <LCD_moveCursor+0x56>
    2288:	2c 81       	ldd	r18, Y+4	; 0x04
    228a:	3d 81       	ldd	r19, Y+5	; 0x05
    228c:	22 30       	cpi	r18, 0x02	; 2
    228e:	31 05       	cpc	r19, r1
    2290:	2c f4       	brge	.+10     	; 0x229c <LCD_moveCursor+0x3a>
    2292:	8c 81       	ldd	r24, Y+4	; 0x04
    2294:	9d 81       	ldd	r25, Y+5	; 0x05
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	61 f0       	breq	.+24     	; 0x22b2 <LCD_moveCursor+0x50>
    229a:	19 c0       	rjmp	.+50     	; 0x22ce <LCD_moveCursor+0x6c>
    229c:	2c 81       	ldd	r18, Y+4	; 0x04
    229e:	3d 81       	ldd	r19, Y+5	; 0x05
    22a0:	22 30       	cpi	r18, 0x02	; 2
    22a2:	31 05       	cpc	r19, r1
    22a4:	69 f0       	breq	.+26     	; 0x22c0 <LCD_moveCursor+0x5e>
    22a6:	8c 81       	ldd	r24, Y+4	; 0x04
    22a8:	9d 81       	ldd	r25, Y+5	; 0x05
    22aa:	83 30       	cpi	r24, 0x03	; 3
    22ac:	91 05       	cpc	r25, r1
    22ae:	61 f0       	breq	.+24     	; 0x22c8 <LCD_moveCursor+0x66>
    22b0:	0e c0       	rjmp	.+28     	; 0x22ce <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    22b2:	8b 81       	ldd	r24, Y+3	; 0x03
    22b4:	89 83       	std	Y+1, r24	; 0x01
    22b6:	0b c0       	rjmp	.+22     	; 0x22ce <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    22b8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ba:	80 5c       	subi	r24, 0xC0	; 192
    22bc:	89 83       	std	Y+1, r24	; 0x01
    22be:	07 c0       	rjmp	.+14     	; 0x22ce <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x14;
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	8c 5e       	subi	r24, 0xEC	; 236
    22c4:	89 83       	std	Y+1, r24	; 0x01
    22c6:	03 c0       	rjmp	.+6      	; 0x22ce <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x54;
    22c8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ca:	8c 5a       	subi	r24, 0xAC	; 172
    22cc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	LCD_WriteCommand( lcd_memory_address |LCD_SET_CURSOR_LOCATION);
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
    22d0:	80 68       	ori	r24, 0x80	; 128
    22d2:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <LCD_WriteCommand>

}
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	cf 91       	pop	r28
    22e2:	df 91       	pop	r29
    22e4:	08 95       	ret

000022e6 <LCD_ClearScreen>:

void LCD_ClearScreen(){
    22e6:	df 93       	push	r29
    22e8:	cf 93       	push	r28
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	2e 97       	sbiw	r28, 0x0e	; 14
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	f8 94       	cli
    22f4:	de bf       	out	0x3e, r29	; 62
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteCommand(LCD_CLEAR_COMMAND);
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <LCD_WriteCommand>
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	a0 e2       	ldi	r26, 0x20	; 32
    2306:	b1 e4       	ldi	r27, 0x41	; 65
    2308:	8b 87       	std	Y+11, r24	; 0x0b
    230a:	9c 87       	std	Y+12, r25	; 0x0c
    230c:	ad 87       	std	Y+13, r26	; 0x0d
    230e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2310:	6b 85       	ldd	r22, Y+11	; 0x0b
    2312:	7c 85       	ldd	r23, Y+12	; 0x0c
    2314:	8d 85       	ldd	r24, Y+13	; 0x0d
    2316:	9e 85       	ldd	r25, Y+14	; 0x0e
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	4a e7       	ldi	r20, 0x7A	; 122
    231e:	55 e4       	ldi	r21, 0x45	; 69
    2320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	8f 83       	std	Y+7, r24	; 0x07
    232a:	98 87       	std	Y+8, r25	; 0x08
    232c:	a9 87       	std	Y+9, r26	; 0x09
    232e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2330:	6f 81       	ldd	r22, Y+7	; 0x07
    2332:	78 85       	ldd	r23, Y+8	; 0x08
    2334:	89 85       	ldd	r24, Y+9	; 0x09
    2336:	9a 85       	ldd	r25, Y+10	; 0x0a
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e8       	ldi	r20, 0x80	; 128
    233e:	5f e3       	ldi	r21, 0x3F	; 63
    2340:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2344:	88 23       	and	r24, r24
    2346:	2c f4       	brge	.+10     	; 0x2352 <LCD_ClearScreen+0x6c>
		__ticks = 1;
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	9e 83       	std	Y+6, r25	; 0x06
    234e:	8d 83       	std	Y+5, r24	; 0x05
    2350:	3f c0       	rjmp	.+126    	; 0x23d0 <LCD_ClearScreen+0xea>
	else if (__tmp > 65535)
    2352:	6f 81       	ldd	r22, Y+7	; 0x07
    2354:	78 85       	ldd	r23, Y+8	; 0x08
    2356:	89 85       	ldd	r24, Y+9	; 0x09
    2358:	9a 85       	ldd	r25, Y+10	; 0x0a
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	3f ef       	ldi	r19, 0xFF	; 255
    235e:	4f e7       	ldi	r20, 0x7F	; 127
    2360:	57 e4       	ldi	r21, 0x47	; 71
    2362:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2366:	18 16       	cp	r1, r24
    2368:	4c f5       	brge	.+82     	; 0x23bc <LCD_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236a:	6b 85       	ldd	r22, Y+11	; 0x0b
    236c:	7c 85       	ldd	r23, Y+12	; 0x0c
    236e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2370:	9e 85       	ldd	r25, Y+14	; 0x0e
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e2       	ldi	r20, 0x20	; 32
    2378:	51 e4       	ldi	r21, 0x41	; 65
    237a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	bc 01       	movw	r22, r24
    2384:	cd 01       	movw	r24, r26
    2386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	9e 83       	std	Y+6, r25	; 0x06
    2390:	8d 83       	std	Y+5, r24	; 0x05
    2392:	0f c0       	rjmp	.+30     	; 0x23b2 <LCD_ClearScreen+0xcc>
    2394:	80 e9       	ldi	r24, 0x90	; 144
    2396:	91 e0       	ldi	r25, 0x01	; 1
    2398:	9c 83       	std	Y+4, r25	; 0x04
    239a:	8b 83       	std	Y+3, r24	; 0x03
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	9c 81       	ldd	r25, Y+4	; 0x04
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <LCD_ClearScreen+0xba>
    23a4:	9c 83       	std	Y+4, r25	; 0x04
    23a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	9e 83       	std	Y+6, r25	; 0x06
    23b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b2:	8d 81       	ldd	r24, Y+5	; 0x05
    23b4:	9e 81       	ldd	r25, Y+6	; 0x06
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	69 f7       	brne	.-38     	; 0x2394 <LCD_ClearScreen+0xae>
    23ba:	14 c0       	rjmp	.+40     	; 0x23e4 <LCD_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23bc:	6f 81       	ldd	r22, Y+7	; 0x07
    23be:	78 85       	ldd	r23, Y+8	; 0x08
    23c0:	89 85       	ldd	r24, Y+9	; 0x09
    23c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	9e 83       	std	Y+6, r25	; 0x06
    23ce:	8d 83       	std	Y+5, r24	; 0x05
    23d0:	8d 81       	ldd	r24, Y+5	; 0x05
    23d2:	9e 81       	ldd	r25, Y+6	; 0x06
    23d4:	9a 83       	std	Y+2, r25	; 0x02
    23d6:	89 83       	std	Y+1, r24	; 0x01
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	9a 81       	ldd	r25, Y+2	; 0x02
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	f1 f7       	brne	.-4      	; 0x23dc <LCD_ClearScreen+0xf6>
    23e0:	9a 83       	std	Y+2, r25	; 0x02
    23e2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    23e4:	2e 96       	adiw	r28, 0x0e	; 14
    23e6:	0f b6       	in	r0, 0x3f	; 63
    23e8:	f8 94       	cli
    23ea:	de bf       	out	0x3e, r29	; 62
    23ec:	0f be       	out	0x3f, r0	; 63
    23ee:	cd bf       	out	0x3d, r28	; 61
    23f0:	cf 91       	pop	r28
    23f2:	df 91       	pop	r29
    23f4:	08 95       	ret

000023f6 <LCD_WriteNumber>:
void LCD_WriteNumber(int number){
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	62 97       	sbiw	r28, 0x12	; 18
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	de bf       	out	0x3e, r29	; 62
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	cd bf       	out	0x3d, r28	; 61
    240a:	9c 87       	std	Y+12, r25	; 0x0c
    240c:	8b 87       	std	Y+11, r24	; 0x0b
	}
	for (uint8 i=0;i<count;i++){
		LCD_DisplayChar(arr[i]);
	}

}
    240e:	2d b7       	in	r18, 0x3d	; 61
    2410:	3e b7       	in	r19, 0x3e	; 62
    2412:	3a 8b       	std	Y+18, r19	; 0x12
    2414:	29 8b       	std	Y+17, r18	; 0x11

void LCD_ClearScreen(){
	LCD_WriteCommand(LCD_CLEAR_COMMAND);
	_delay_ms(10);
}
void LCD_WriteNumber(int number){
    2416:	8d b7       	in	r24, 0x3d	; 61
    2418:	9e b7       	in	r25, 0x3e	; 62
    241a:	9e 87       	std	Y+14, r25	; 0x0e
    241c:	8d 87       	std	Y+13, r24	; 0x0d
	if (number==0){
    241e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2420:	9c 85       	ldd	r25, Y+12	; 0x0c
    2422:	00 97       	sbiw	r24, 0x00	; 0
    2424:	21 f4       	brne	.+8      	; 0x242e <LCD_WriteNumber+0x38>
		LCD_DisplayChar('0');
    2426:	80 e3       	ldi	r24, 0x30	; 48
    2428:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <LCD_DisplayChar>
    242c:	7c c0       	rjmp	.+248    	; 0x2526 <LCD_WriteNumber+0x130>
		return;
	}
	int n=number;
    242e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2430:	9c 85       	ldd	r25, Y+12	; 0x0c
    2432:	98 87       	std	Y+8, r25	; 0x08
    2434:	8f 83       	std	Y+7, r24	; 0x07
	uint8 count=0;
    2436:	1e 82       	std	Y+6, r1	; 0x06
	uint8 digit=0;
    2438:	1d 82       	std	Y+5, r1	; 0x05
	for (uint8 i=0;n!=0;i++){
    243a:	1c 82       	std	Y+4, r1	; 0x04
    243c:	10 c0       	rjmp	.+32     	; 0x245e <LCD_WriteNumber+0x68>
		n=n/10;
    243e:	8f 81       	ldd	r24, Y+7	; 0x07
    2440:	98 85       	ldd	r25, Y+8	; 0x08
    2442:	2a e0       	ldi	r18, 0x0A	; 10
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	b9 01       	movw	r22, r18
    2448:	0e 94 3d 13 	call	0x267a	; 0x267a <__divmodhi4>
    244c:	cb 01       	movw	r24, r22
    244e:	98 87       	std	Y+8, r25	; 0x08
    2450:	8f 83       	std	Y+7, r24	; 0x07
		count++;
    2452:	8e 81       	ldd	r24, Y+6	; 0x06
    2454:	8f 5f       	subi	r24, 0xFF	; 255
    2456:	8e 83       	std	Y+6, r24	; 0x06
		return;
	}
	int n=number;
	uint8 count=0;
	uint8 digit=0;
	for (uint8 i=0;n!=0;i++){
    2458:	8c 81       	ldd	r24, Y+4	; 0x04
    245a:	8f 5f       	subi	r24, 0xFF	; 255
    245c:	8c 83       	std	Y+4, r24	; 0x04
    245e:	8f 81       	ldd	r24, Y+7	; 0x07
    2460:	98 85       	ldd	r25, Y+8	; 0x08
    2462:	00 97       	sbiw	r24, 0x00	; 0
    2464:	61 f7       	brne	.-40     	; 0x243e <LCD_WriteNumber+0x48>
		n=n/10;
		count++;
	}
	uint8 arr[count];
    2466:	8e 81       	ldd	r24, Y+6	; 0x06
    2468:	88 2f       	mov	r24, r24
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	2d b7       	in	r18, 0x3d	; 61
    246e:	3e b7       	in	r19, 0x3e	; 62
    2470:	28 1b       	sub	r18, r24
    2472:	39 0b       	sbc	r19, r25
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	f8 94       	cli
    2478:	3e bf       	out	0x3e, r19	; 62
    247a:	0f be       	out	0x3f, r0	; 63
    247c:	2d bf       	out	0x3d, r18	; 61
    247e:	8d b7       	in	r24, 0x3d	; 61
    2480:	9e b7       	in	r25, 0x3e	; 62
    2482:	01 96       	adiw	r24, 0x01	; 1
    2484:	98 8b       	std	Y+16, r25	; 0x10
    2486:	8f 87       	std	Y+15, r24	; 0x0f
    2488:	8f 85       	ldd	r24, Y+15	; 0x0f
    248a:	98 89       	ldd	r25, Y+16	; 0x10
    248c:	00 96       	adiw	r24, 0x00	; 0
    248e:	98 8b       	std	Y+16, r25	; 0x10
    2490:	8f 87       	std	Y+15, r24	; 0x0f
    2492:	2f 85       	ldd	r18, Y+15	; 0x0f
    2494:	38 89       	ldd	r19, Y+16	; 0x10
    2496:	3a 87       	std	Y+10, r19	; 0x0a
    2498:	29 87       	std	Y+9, r18	; 0x09
	n=number;
    249a:	8b 85       	ldd	r24, Y+11	; 0x0b
    249c:	9c 85       	ldd	r25, Y+12	; 0x0c
    249e:	98 87       	std	Y+8, r25	; 0x08
    24a0:	8f 83       	std	Y+7, r24	; 0x07
	for (int i=(count-1);i>=0 ;--i){
    24a2:	8e 81       	ldd	r24, Y+6	; 0x06
    24a4:	88 2f       	mov	r24, r24
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	9b 83       	std	Y+3, r25	; 0x03
    24ac:	8a 83       	std	Y+2, r24	; 0x02
    24ae:	23 c0       	rjmp	.+70     	; 0x24f6 <LCD_WriteNumber+0x100>
		digit=n%10;
    24b0:	8f 81       	ldd	r24, Y+7	; 0x07
    24b2:	98 85       	ldd	r25, Y+8	; 0x08
    24b4:	2a e0       	ldi	r18, 0x0A	; 10
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	b9 01       	movw	r22, r18
    24ba:	0e 94 3d 13 	call	0x267a	; 0x267a <__divmodhi4>
    24be:	8d 83       	std	Y+5, r24	; 0x05
		digit= digit+'0';
    24c0:	8d 81       	ldd	r24, Y+5	; 0x05
    24c2:	80 5d       	subi	r24, 0xD0	; 208
    24c4:	8d 83       	std	Y+5, r24	; 0x05
		arr[i]=digit;
    24c6:	2a 81       	ldd	r18, Y+2	; 0x02
    24c8:	3b 81       	ldd	r19, Y+3	; 0x03
    24ca:	89 85       	ldd	r24, Y+9	; 0x09
    24cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ce:	fc 01       	movw	r30, r24
    24d0:	e2 0f       	add	r30, r18
    24d2:	f3 1f       	adc	r31, r19
    24d4:	8d 81       	ldd	r24, Y+5	; 0x05
    24d6:	80 83       	st	Z, r24
		n=n/10;
    24d8:	8f 81       	ldd	r24, Y+7	; 0x07
    24da:	98 85       	ldd	r25, Y+8	; 0x08
    24dc:	2a e0       	ldi	r18, 0x0A	; 10
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	b9 01       	movw	r22, r18
    24e2:	0e 94 3d 13 	call	0x267a	; 0x267a <__divmodhi4>
    24e6:	cb 01       	movw	r24, r22
    24e8:	98 87       	std	Y+8, r25	; 0x08
    24ea:	8f 83       	std	Y+7, r24	; 0x07
		n=n/10;
		count++;
	}
	uint8 arr[count];
	n=number;
	for (int i=(count-1);i>=0 ;--i){
    24ec:	8a 81       	ldd	r24, Y+2	; 0x02
    24ee:	9b 81       	ldd	r25, Y+3	; 0x03
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	9b 83       	std	Y+3, r25	; 0x03
    24f4:	8a 83       	std	Y+2, r24	; 0x02
    24f6:	8a 81       	ldd	r24, Y+2	; 0x02
    24f8:	9b 81       	ldd	r25, Y+3	; 0x03
    24fa:	99 23       	and	r25, r25
    24fc:	cc f6       	brge	.-78     	; 0x24b0 <LCD_WriteNumber+0xba>
		digit=n%10;
		digit= digit+'0';
		arr[i]=digit;
		n=n/10;
	}
	for (uint8 i=0;i<count;i++){
    24fe:	19 82       	std	Y+1, r1	; 0x01
    2500:	0e c0       	rjmp	.+28     	; 0x251e <LCD_WriteNumber+0x128>
		LCD_DisplayChar(arr[i]);
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	28 2f       	mov	r18, r24
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	89 85       	ldd	r24, Y+9	; 0x09
    250a:	9a 85       	ldd	r25, Y+10	; 0x0a
    250c:	fc 01       	movw	r30, r24
    250e:	e2 0f       	add	r30, r18
    2510:	f3 1f       	adc	r31, r19
    2512:	80 81       	ld	r24, Z
    2514:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <LCD_DisplayChar>
		digit=n%10;
		digit= digit+'0';
		arr[i]=digit;
		n=n/10;
	}
	for (uint8 i=0;i<count;i++){
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	8f 5f       	subi	r24, 0xFF	; 255
    251c:	89 83       	std	Y+1, r24	; 0x01
    251e:	99 81       	ldd	r25, Y+1	; 0x01
    2520:	8e 81       	ldd	r24, Y+6	; 0x06
    2522:	98 17       	cp	r25, r24
    2524:	70 f3       	brcs	.-36     	; 0x2502 <LCD_WriteNumber+0x10c>
    2526:	8d 85       	ldd	r24, Y+13	; 0x0d
    2528:	9e 85       	ldd	r25, Y+14	; 0x0e
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	9e bf       	out	0x3e, r25	; 62
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	8d bf       	out	0x3d, r24	; 61
		LCD_DisplayChar(arr[i]);
	}

}
    2534:	29 89       	ldd	r18, Y+17	; 0x11
    2536:	3a 89       	ldd	r19, Y+18	; 0x12
    2538:	0f b6       	in	r0, 0x3f	; 63
    253a:	f8 94       	cli
    253c:	3e bf       	out	0x3e, r19	; 62
    253e:	0f be       	out	0x3f, r0	; 63
    2540:	2d bf       	out	0x3d, r18	; 61
    2542:	62 96       	adiw	r28, 0x12	; 18
    2544:	0f b6       	in	r0, 0x3f	; 63
    2546:	f8 94       	cli
    2548:	de bf       	out	0x3e, r29	; 62
    254a:	0f be       	out	0x3f, r0	; 63
    254c:	cd bf       	out	0x3d, r28	; 61
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	08 95       	ret

00002554 <__vector_11>:
#include"App.h"

ISR(TIMER0_OVF_vect) {
    2554:	1f 92       	push	r1
    2556:	0f 92       	push	r0
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	0f 92       	push	r0
    255c:	11 24       	eor	r1, r1
    255e:	2f 93       	push	r18
    2560:	3f 93       	push	r19
    2562:	4f 93       	push	r20
    2564:	5f 93       	push	r21
    2566:	6f 93       	push	r22
    2568:	7f 93       	push	r23
    256a:	8f 93       	push	r24
    256c:	9f 93       	push	r25
    256e:	af 93       	push	r26
    2570:	bf 93       	push	r27
    2572:	ef 93       	push	r30
    2574:	ff 93       	push	r31
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
	if (overflows == OVERFLOWS_PER_SECOND) {
    257e:	80 91 7a 00 	lds	r24, 0x007A
    2582:	8e 33       	cpi	r24, 0x3E	; 62
    2584:	f1 f4       	brne	.+60     	; 0x25c2 <__vector_11+0x6e>
		Timer0_Set_Start(TIMER_INITIAL_VALUE);
    2586:	87 ef       	ldi	r24, 0xF7	; 247
    2588:	0e 94 c0 05 	call	0xb80	; 0xb80 <Timer0_Set_Start>
		watchdog++;
    258c:	80 91 7c 00 	lds	r24, 0x007C
    2590:	8f 5f       	subi	r24, 0xFF	; 255
    2592:	80 93 7c 00 	sts	0x007C, r24
		counter++;
    2596:	80 91 7b 00 	lds	r24, 0x007B
    259a:	8f 5f       	subi	r24, 0xFF	; 255
    259c:	80 93 7b 00 	sts	0x007B, r24
		DIO_TogglePin(DIO_PORTB, DIO_PIN7);
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	67 e0       	ldi	r22, 0x07	; 7
    25a4:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <DIO_TogglePin>
		overflows = 0;
    25a8:	10 92 7a 00 	sts	0x007A, r1
		LCD_moveCursor(0, 0);
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	60 e0       	ldi	r22, 0x00	; 0
    25b0:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_moveCursor>
		LCD_WriteNumber(counter);
    25b4:	80 91 7b 00 	lds	r24, 0x007B
    25b8:	99 27       	eor	r25, r25
    25ba:	87 fd       	sbrc	r24, 7
    25bc:	90 95       	com	r25
    25be:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <LCD_WriteNumber>

	}

	if (watchdog == TIME_OUT_SECONDS) {
    25c2:	80 91 7c 00 	lds	r24, 0x007C
    25c6:	8e 31       	cpi	r24, 0x1E	; 30
    25c8:	b9 f4       	brne	.+46     	; 0x25f8 <__vector_11+0xa4>
		LCD_ClearScreen();
    25ca:	0e 94 73 11 	call	0x22e6	; 0x22e6 <LCD_ClearScreen>
		LCD_moveCursor(1, 5);
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	65 e0       	ldi	r22, 0x05	; 5
    25d2:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_moveCursor>
		LCD_DisplayString("WATCHDOG");
    25d6:	80 e6       	ldi	r24, 0x60	; 96
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	0e 94 15 11 	call	0x222a	; 0x222a <LCD_DisplayString>
		LCD_moveCursor(2, 5);
    25de:	82 e0       	ldi	r24, 0x02	; 2
    25e0:	65 e0       	ldi	r22, 0x05	; 5
    25e2:	0e 94 31 11 	call	0x2262	; 0x2262 <LCD_moveCursor>
		LCD_DisplayString("TIMEOUT");
    25e6:	89 e6       	ldi	r24, 0x69	; 105
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	0e 94 15 11 	call	0x222a	; 0x222a <LCD_DisplayString>

		watchdog = 0;
    25ee:	10 92 7c 00 	sts	0x007C, r1
		TCCR0 = 0;
    25f2:	e3 e5       	ldi	r30, 0x53	; 83
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	10 82       	st	Z, r1
	}
	overflows++;
    25f8:	80 91 7a 00 	lds	r24, 0x007A
    25fc:	8f 5f       	subi	r24, 0xFF	; 255
    25fe:	80 93 7a 00 	sts	0x007A, r24
}
    2602:	cf 91       	pop	r28
    2604:	df 91       	pop	r29
    2606:	ff 91       	pop	r31
    2608:	ef 91       	pop	r30
    260a:	bf 91       	pop	r27
    260c:	af 91       	pop	r26
    260e:	9f 91       	pop	r25
    2610:	8f 91       	pop	r24
    2612:	7f 91       	pop	r23
    2614:	6f 91       	pop	r22
    2616:	5f 91       	pop	r21
    2618:	4f 91       	pop	r20
    261a:	3f 91       	pop	r19
    261c:	2f 91       	pop	r18
    261e:	0f 90       	pop	r0
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	0f 90       	pop	r0
    2624:	1f 90       	pop	r1
    2626:	18 95       	reti

00002628 <app_init>:
void app_init() {
    2628:	df 93       	push	r29
    262a:	cf 93       	push	r28
    262c:	cd b7       	in	r28, 0x3d	; 61
    262e:	de b7       	in	r29, 0x3e	; 62
	LCD_Init();
    2630:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LCD_Init>
	LCD_WriteNumber(0);
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <LCD_WriteNumber>
	Timer0_Init();
    263c:	0e 94 a3 05 	call	0xb46	; 0xb46 <Timer0_Init>
	DIO_SetPinDir(DIO_PORTB, DIO_PIN7, OUTPUT);
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	67 e0       	ldi	r22, 0x07	; 7
    2644:	41 e0       	ldi	r20, 0x01	; 1
    2646:	0e 94 0f 06 	call	0xc1e	; 0xc1e <DIO_SetPinDir>
	DIO_SetPinVal(DIO_PORTB, DIO_PIN7, LOW);
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	67 e0       	ldi	r22, 0x07	; 7
    264e:	40 e0       	ldi	r20, 0x00	; 0
    2650:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_SetPinVal>
}
    2654:	cf 91       	pop	r28
    2656:	df 91       	pop	r29
    2658:	08 95       	ret

0000265a <app>:

void app() {
    265a:	df 93       	push	r29
    265c:	cf 93       	push	r28
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
	/* Do Nothing*/
}
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	08 95       	ret

00002668 <main>:
void app_init();
void app();

int main(){
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
	app_init();
    2670:	0e 94 14 13 	call	0x2628	; 0x2628 <app_init>
	while(1){
		app();
    2674:	0e 94 2d 13 	call	0x265a	; 0x265a <app>
    2678:	fd cf       	rjmp	.-6      	; 0x2674 <main+0xc>

0000267a <__divmodhi4>:
    267a:	97 fb       	bst	r25, 7
    267c:	09 2e       	mov	r0, r25
    267e:	07 26       	eor	r0, r23
    2680:	0a d0       	rcall	.+20     	; 0x2696 <__divmodhi4_neg1>
    2682:	77 fd       	sbrc	r23, 7
    2684:	04 d0       	rcall	.+8      	; 0x268e <__divmodhi4_neg2>
    2686:	0c d0       	rcall	.+24     	; 0x26a0 <__udivmodhi4>
    2688:	06 d0       	rcall	.+12     	; 0x2696 <__divmodhi4_neg1>
    268a:	00 20       	and	r0, r0
    268c:	1a f4       	brpl	.+6      	; 0x2694 <__divmodhi4_exit>

0000268e <__divmodhi4_neg2>:
    268e:	70 95       	com	r23
    2690:	61 95       	neg	r22
    2692:	7f 4f       	sbci	r23, 0xFF	; 255

00002694 <__divmodhi4_exit>:
    2694:	08 95       	ret

00002696 <__divmodhi4_neg1>:
    2696:	f6 f7       	brtc	.-4      	; 0x2694 <__divmodhi4_exit>
    2698:	90 95       	com	r25
    269a:	81 95       	neg	r24
    269c:	9f 4f       	sbci	r25, 0xFF	; 255
    269e:	08 95       	ret

000026a0 <__udivmodhi4>:
    26a0:	aa 1b       	sub	r26, r26
    26a2:	bb 1b       	sub	r27, r27
    26a4:	51 e1       	ldi	r21, 0x11	; 17
    26a6:	07 c0       	rjmp	.+14     	; 0x26b6 <__udivmodhi4_ep>

000026a8 <__udivmodhi4_loop>:
    26a8:	aa 1f       	adc	r26, r26
    26aa:	bb 1f       	adc	r27, r27
    26ac:	a6 17       	cp	r26, r22
    26ae:	b7 07       	cpc	r27, r23
    26b0:	10 f0       	brcs	.+4      	; 0x26b6 <__udivmodhi4_ep>
    26b2:	a6 1b       	sub	r26, r22
    26b4:	b7 0b       	sbc	r27, r23

000026b6 <__udivmodhi4_ep>:
    26b6:	88 1f       	adc	r24, r24
    26b8:	99 1f       	adc	r25, r25
    26ba:	5a 95       	dec	r21
    26bc:	a9 f7       	brne	.-22     	; 0x26a8 <__udivmodhi4_loop>
    26be:	80 95       	com	r24
    26c0:	90 95       	com	r25
    26c2:	bc 01       	movw	r22, r24
    26c4:	cd 01       	movw	r24, r26
    26c6:	08 95       	ret

000026c8 <__prologue_saves__>:
    26c8:	2f 92       	push	r2
    26ca:	3f 92       	push	r3
    26cc:	4f 92       	push	r4
    26ce:	5f 92       	push	r5
    26d0:	6f 92       	push	r6
    26d2:	7f 92       	push	r7
    26d4:	8f 92       	push	r8
    26d6:	9f 92       	push	r9
    26d8:	af 92       	push	r10
    26da:	bf 92       	push	r11
    26dc:	cf 92       	push	r12
    26de:	df 92       	push	r13
    26e0:	ef 92       	push	r14
    26e2:	ff 92       	push	r15
    26e4:	0f 93       	push	r16
    26e6:	1f 93       	push	r17
    26e8:	cf 93       	push	r28
    26ea:	df 93       	push	r29
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
    26f0:	ca 1b       	sub	r28, r26
    26f2:	db 0b       	sbc	r29, r27
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	de bf       	out	0x3e, r29	; 62
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	cd bf       	out	0x3d, r28	; 61
    26fe:	09 94       	ijmp

00002700 <__epilogue_restores__>:
    2700:	2a 88       	ldd	r2, Y+18	; 0x12
    2702:	39 88       	ldd	r3, Y+17	; 0x11
    2704:	48 88       	ldd	r4, Y+16	; 0x10
    2706:	5f 84       	ldd	r5, Y+15	; 0x0f
    2708:	6e 84       	ldd	r6, Y+14	; 0x0e
    270a:	7d 84       	ldd	r7, Y+13	; 0x0d
    270c:	8c 84       	ldd	r8, Y+12	; 0x0c
    270e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2710:	aa 84       	ldd	r10, Y+10	; 0x0a
    2712:	b9 84       	ldd	r11, Y+9	; 0x09
    2714:	c8 84       	ldd	r12, Y+8	; 0x08
    2716:	df 80       	ldd	r13, Y+7	; 0x07
    2718:	ee 80       	ldd	r14, Y+6	; 0x06
    271a:	fd 80       	ldd	r15, Y+5	; 0x05
    271c:	0c 81       	ldd	r16, Y+4	; 0x04
    271e:	1b 81       	ldd	r17, Y+3	; 0x03
    2720:	aa 81       	ldd	r26, Y+2	; 0x02
    2722:	b9 81       	ldd	r27, Y+1	; 0x01
    2724:	ce 0f       	add	r28, r30
    2726:	d1 1d       	adc	r29, r1
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	f8 94       	cli
    272c:	de bf       	out	0x3e, r29	; 62
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	cd bf       	out	0x3d, r28	; 61
    2732:	ed 01       	movw	r28, r26
    2734:	08 95       	ret

00002736 <_exit>:
    2736:	f8 94       	cli

00002738 <__stop_program>:
    2738:	ff cf       	rjmp	.-2      	; 0x2738 <__stop_program>
